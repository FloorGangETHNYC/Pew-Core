{
  "language": "Solidity",
  "sources": {
    "contracts/ERC721Soulbound.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport {\r\n    IERC721,\r\n    ERC721\r\n} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport {IERC721Soulbound} from \"./IERC721Soulbound.sol\";\r\n\r\nabstract contract ERC721Soulbound is ERC721, IERC721Soulbound {\r\n    // base ERC721 contract whose ids bind to this collection\r\n    IERC721 private immutable _soul;\r\n    // tokenId => soulId (a soulId MAY bind with many tokenIds)\r\n    mapping(uint256 => uint256) private _boundTo;\r\n\r\n    constructor(\r\n        address soul_,\r\n        string memory name_,\r\n        string memory symbol_\r\n    ) ERC721(name_, symbol_) {\r\n        _soul = IERC721(soul_);\r\n    }\r\n\r\n    function reclaim(address claimant, uint256 tokenId) public virtual override {\r\n        require(canReclaim(claimant, tokenId), \"ERC721Soulbound: claimant cannot reclaim\");\r\n        emit Reclaim(tokenId, _boundTo[tokenId], claimant);\r\n        \r\n        _safeTransfer(ownerOf(tokenId), claimant, tokenId, \"\");\r\n    }\r\n\r\n    function soul() public virtual override view returns (address) {\r\n        return address(_soul);\r\n    }\r\n\r\n    function soulOwner(uint256 tokenId) public virtual override view returns (address) {\r\n        return _soul.ownerOf(_boundTo[tokenId]);\r\n    }\r\n\r\n    function boundTo(uint256 tokenId) public virtual override view returns (uint256) {\r\n        return _boundTo[tokenId];\r\n    }\r\n\r\n    function canReclaim(\r\n        address claimant,\r\n        uint256 tokenId\r\n    ) public virtual override view returns (bool) {\r\n        address soulOwner_ = soulOwner(tokenId);\r\n        return (soulOwner_ != ownerOf(tokenId)) && (soulOwner_ == claimant);\r\n    }\r\n\r\n    function _soulbind(\r\n        uint256 soulId,\r\n        address claimant,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(\r\n            _soul.ownerOf(soulId) == claimant,\r\n            \"ERC721Soulbound: claimant not owner of soulId\"\r\n        );\r\n        emit Soulbind(tokenId, soulId, claimant);\r\n        _boundTo[tokenId] = soulId;\r\n\r\n        _safeMint(claimant, tokenId);\r\n    }\r\n    \r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/IERC721Soulbound.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IERC721Soulbound is IERC721 {\r\n    event Reclaim(uint256 tokenId, uint256 baseTokenId, address claimant);\r\n\r\n    event Soulbind(uint256 tokenId, uint256 baseTokenId, address claimant);\r\n\r\n    function reclaim(address claimant, uint256 tokenId) external;\r\n\r\n    function canReclaim(address claimant, uint256 tokenId) external view returns (bool);\r\n\r\n    function soul() external view returns (address);\r\n\r\n    function soulOwner(uint256 tokenId) external view returns (address);\r\n\r\n    function boundTo(uint256 tokenId) external view returns (uint256);\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/IPewNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface PewNFT is IERC721 {\r\n    function mint(address _to, uint256 _tokenId) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function upvote(uint256 tokenId, uint256 contributionIndex)\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    function downvote(uint256 tokenId, uint256 contributionIndex)\r\n        external\r\n        view\r\n        returns (string memory);\r\n}\r\n"
    },
    "contracts/PewNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\ncontract PewNFT is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Store data about the contributions made by a user holding the token\r\n    struct Contribution {\r\n        string ipfsHash;\r\n        uint256 upvotes;\r\n        uint256 downvotes;\r\n    }\r\n\r\n    mapping(uint256 => Contribution[]) contributions;\r\n    mapping(uint256 => uint256) mintedTime;\r\n\r\n    address public PEW_CORE;\r\n    string public baseURI;\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint128 internal _currentIndex;\r\n\r\n    event ContributionAdded(\r\n        address indexed contributor,\r\n        uint256 indexed tokenId,\r\n        string ipfsHash\r\n    );\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address _pewCore\r\n    ) ERC721(name_, symbol_) {\r\n        PEW_CORE = address(_pewCore);\r\n    }\r\n\r\n    modifier onlyPew() {\r\n        require(msg.sender == address(PEW_CORE));\r\n        _;\r\n    }\r\n\r\n    function mint(address _to) external onlyPew {\r\n        _safeMint(_to, _currentIndex);\r\n        mintedTime[_currentIndex] = block.timestamp;\r\n        _currentIndex++;\r\n    }\r\n\r\n    /**\r\n     * R@notice Add Contribution to the token.\r\n     */\r\n    function addContribution(string memory ipfsHash, uint256 tokenId)\r\n        external\r\n        onlyPew\r\n    {\r\n        require(\r\n            tx.origin == ownerOf(tokenId),\r\n            \"Only the owner can add a contribution\"\r\n        );\r\n\r\n        Contribution memory contribution = Contribution(ipfsHash, 0, 0);\r\n        contributions[tokenId].push(contribution);\r\n        emit ContributionAdded(msg.sender, tokenId, ipfsHash);\r\n    }\r\n\r\n    /**\r\n     * @notice Upvote a contribution.\r\n     */\r\n    function upvote(uint256 tokenId, uint256 contributionIndex)\r\n        external\r\n        onlyPew\r\n    {\r\n        Contribution storage contribution = contributions[tokenId][\r\n            contributionIndex\r\n        ];\r\n        contribution.upvotes++;\r\n    }\r\n\r\n    /**\r\n     * @notice Downvote a contribution.\r\n     */\r\n    function downvote(uint256 tokenId, uint256 contributionIndex)\r\n        external\r\n        onlyPew\r\n    {\r\n        Contribution storage contribution = contributions[tokenId][\r\n            contributionIndex\r\n        ];\r\n        contribution.downvotes++;\r\n    }\r\n\r\n    /**\r\n     * Get Total Supply of Tokens Minted\r\n     * @return Current Total Supply\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     * @dev gets baseURI from contract state variable\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        uint256 _governanceScore = getGovernanceScore(tokenId);\r\n\r\n        // NFTS that level up based on the governance score of the token.\r\n        // Storj is used to host the images. Storj enables fast and secure cloud storage and it is built ontop of IPFS.\r\n        if (_governanceScore > 1) {\r\n            return\r\n                \"https://link.storjshare.io/jvxrj4svnfnz664lnpoawmwnzu2q/demo-bucket%2Ficon-rank-silver.png\";\r\n        } else if (_governanceScore > 2) {\r\n            return\r\n                \"https://link.storjshare.io/ju4dlex6o6lyfjqwxwrc76ua5czq/demo-bucket%2Ficon-rank-gold.png\";\r\n        } else if (_governanceScore > 3) {\r\n            return\r\n                \"https://link.storjshare.io/jxiaovikkuwcupfqkqueinnno6kq/demo-bucket%2Ficon-rank-platinum.png\";\r\n        } else if (_governanceScore > 4) {\r\n            return\r\n                \"https://link.storjshare.io/jurkcbz6kacwnjefr5bhrrucvfdq/demo-bucket%2Ficon-rank-diamond.png\";\r\n        } else {\r\n            return\r\n                \"https://link.storjshare.io/jubzv3gkgwez5f45x7rgiv7ns72a/demo-bucket%2Ficon-rank-bronze.png\";\r\n        }\r\n    }\r\n\r\n    function getUpvotes(uint256 tokenId, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        return contributions[tokenId][index].upvotes;\r\n    }\r\n\r\n    function getDownvotes(uint256 tokenId, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        return contributions[tokenId][index].downvotes;\r\n    }\r\n\r\n    function getTotalUpvotes(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 _totalUpvotes)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\r\n            _totalUpvotes += contributions[tokenId][i].upvotes;\r\n        }\r\n        return _totalUpvotes;\r\n    }\r\n\r\n    function getTotalDownvotes(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 _totalDownvotes)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\r\n            _totalDownvotes += contributions[tokenId][i].downvotes;\r\n        }\r\n        return _totalDownvotes;\r\n    }\r\n\r\n    function getContribution(uint256 tokenId, uint256 index)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"https://ipfs.io/ipfs/\",\r\n                    contributions[tokenId][index].ipfsHash\r\n                )\r\n            );\r\n    }\r\n\r\n    function getAllContributions(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        string memory contributionsString = \"\";\r\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\r\n            if (i + 1 < contributions[tokenId].length) {\r\n                string(\r\n                    abi.encodePacked(\r\n                        contributionsString,\r\n                        \"https://ipfs.io/ipfs/\",\r\n                        contributions[tokenId][i].ipfsHash,\r\n                        \",\"\r\n                    )\r\n                );\r\n            } else {\r\n                string(\r\n                    abi.encodePacked(\r\n                        contributionsString,\r\n                        \"https://ipfs.io/ipfs/\",\r\n                        contributions[tokenId][i].ipfsHash\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return contributionsString;\r\n    }\r\n\r\n    function getContributionCount(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 _contributionCount)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        return contributions[tokenId].length;\r\n    }\r\n\r\n    function getTimeScore(uint256 tokenId) public view returns (uint256) {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        return (block.timestamp - mintedTime[_currentIndex]) / 1 days;\r\n    }\r\n\r\n    function getGovernanceScore(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 _governanceScore)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        uint256 _totalUpvotes = getTotalUpvotes(tokenId);\r\n        uint256 _totalDownvotes = getTotalDownvotes(tokenId);\r\n        uint256 _timeScore = getTimeScore(tokenId);\r\n\r\n        if (_totalDownvotes > _totalUpvotes) {\r\n            _governanceScore = 0;\r\n        } else {\r\n            _governanceScore = _totalUpvotes - _totalDownvotes + _timeScore;\r\n        }\r\n\r\n        return _governanceScore;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal pure override {\r\n        // Prevent Future Transfer of token\r\n        require(from == address(0), \"ERC721: transfer from non-zero address\");\r\n    }\r\n}\r\n"
    },
    "contracts/PewNFTFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./PewNFT.sol\";\r\n\r\ncontract PewNFTFactory {\r\n    uint256 collectionsCounter = 0;\r\n\r\n    // Map Id to collection\r\n    mapping(uint256 => PewNFT) collections;\r\n\r\n    address public PEW_CORE;\r\n\r\n    event CollectionCreated(uint256 id, address collection);\r\n\r\n    modifier onlyPew() {\r\n        require(msg.sender == address(PEW_CORE));\r\n        _;\r\n    }\r\n\r\n    constructor(address _pewCore) {\r\n        PEW_CORE = address(_pewCore);\r\n    }\r\n\r\n    function createCollection(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _pewCore\r\n    ) public onlyPew returns (PewNFT) {\r\n        PewNFT pewAddress = new PewNFT(name, symbol, _pewCore);\r\n\r\n        collections[collectionsCounter] = pewAddress;\r\n        collectionsCounter++;\r\n\r\n        return pewAddress;\r\n        // emit CollectionCreated()\r\n    }\r\n\r\n    function getCollection(uint256 id) public view returns (PewNFT) {\r\n        return collections[id];\r\n    }\r\n}\r\n"
    },
    "contracts/PewCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./PewNFTFactory.sol\";\r\n\r\ncontract PewCore {\r\n    PewNFTFactory public PEW_NFT_FACTORY;\r\n\r\n    mapping(uint256 => string) daoIds;\r\n\r\n    uint256 daoCounter;\r\n\r\n    event DAOCreated(string name, string symbol, address dao);\r\n    event DAOJoined(address indexed member, uint256 indexed _id);\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * @notice Create a new DAO.\r\n     * @param name The name of the DAO.\r\n     * @param symbol The symbol of the DAO.\r\n     * @param metadataHash Metadata Hash of the DAO\r\n     * @dev Include a offchain signer to verify if the structure of the datafile is correct\r\n     */\r\n    function createDAO(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory metadataHash\r\n    ) public {\r\n        PewNFT pewNFT = PEW_NFT_FACTORY.createCollection(\r\n            name,\r\n            symbol,\r\n            address(this)\r\n        );\r\n\r\n        daoIds[daoCounter] = metadataHash;\r\n        daoCounter++;\r\n        emit DAOCreated(name, symbol, address(pewNFT));\r\n    }\r\n\r\n    function joinDAO(uint256 _id) public {\r\n        PEW_NFT_FACTORY.getCollection(_id).mint(msg.sender);\r\n\r\n        emit DAOJoined(msg.sender, _id);\r\n    }\r\n\r\n    /**\r\n     * @notice Add a contributement statement\r\n     * @param _id Id of the DAO\r\n     * @param _tokenId TokenId of the token\r\n     * @param ipfsHash Metadata Hash of the contribution\r\n     * @dev Include a offchain signer to verify if the structure of the datafile is correct\r\n     */\r\n    function addContribution(\r\n        uint256 _id,\r\n        uint256 _tokenId,\r\n        string memory ipfsHash\r\n    ) public {\r\n        require(bytes(ipfsHash).length == 46, \"Incorrect Hash Length\");\r\n        require(bytes(ipfsHash)[0] == 0x51, \"1st char not Q\");\r\n        require(bytes(ipfsHash)[1] == 0x6d, \"2nd chat not m\");\r\n\r\n        PEW_NFT_FACTORY.getCollection(_id).addContribution(ipfsHash, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Upvote a contribution\r\n     * @param _id Id of the DAO\r\n     * @param _tokenId TokenId of the token\r\n     * @param _contributionIndex Index of the contribution\r\n     */\r\n    function upvote(\r\n        uint256 _id,\r\n        uint256 _tokenId,\r\n        uint256 _contributionIndex\r\n    ) public {\r\n        PEW_NFT_FACTORY.getCollection(_id).upvote(_tokenId, _contributionIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Downvote a contribution\r\n     * @param _id Id of the DAO\r\n     * @param _tokenId TokenId of the token\r\n     * @param _contributionIndex Index of the contribution\r\n     */\r\n    function downvote(\r\n        uint256 _id,\r\n        uint256 _tokenId,\r\n        uint256 _contributionIndex\r\n    ) public {\r\n        PEW_NFT_FACTORY.getCollection(_id).downvote(\r\n            _tokenId,\r\n            _contributionIndex\r\n        );\r\n    }\r\n\r\n    function setPewNFTFactory(address _pewNFTFactory) public {\r\n        PEW_NFT_FACTORY = PewNFTFactory(_pewNFTFactory);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}