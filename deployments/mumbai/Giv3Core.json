{
  "address": "0x8A383F8db234D2b266010BfA0fc0D09F8E6e85CC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IImageStorage",
          "name": "staticImageStorage",
          "type": "address"
        },
        {
          "internalType": "contract IImageStorage",
          "name": "dynamicImageStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "DAOCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "DAOJoined",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GIV3_AVATAR_NFT",
      "outputs": [
        {
          "internalType": "contract Giv3AvatarNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIV3_NFT_FACTORY",
      "outputs": [
        {
          "internalType": "contract Giv3NFTFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIV3_TREASURY_FACTORY",
      "outputs": [
        {
          "internalType": "contract Giv3TreasuryFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "createDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIds",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPowerLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "joinDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_giv3NFTFactory",
          "type": "address"
        }
      ],
      "name": "setGiv3NFTFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "treasuryIds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6433f509dfac0b2fc22a1426318818e6fb75b34f5f99fda0c1338fd1f1a0746",
  "receipt": {
    "to": null,
    "from": "0x6a456CAa9069Aa511acFbA21ba3c7A55b331E041",
    "contractAddress": "0x8A383F8db234D2b266010BfA0fc0D09F8E6e85CC",
    "transactionIndex": 3,
    "gasUsed": "7044169",
    "logsBloom": "0x
    "blockHash": "0x375f41f30a4bd9bfa243073682c46d510dc98b6215fc01d06f26363c4a0bbb9d",
    "transactionHash": "0xd6433f509dfac0b2fc22a1426318818e6fb75b34f5f99fda0c1338fd1f1a0746",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27309304,
        "transactionHash": "0xd6433f509dfac0b2fc22a1426318818e6fb75b34f5f99fda0c1338fd1f1a0746",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006a456caa9069aa511acfba21ba3c7a55b331e041",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000006f78f6d1b4b6dad00000000000000000000000000000000000000000000000079e6718446eb62c00000000000000000000000000000000000000000000006f3dd0778fb6f6110be00000000000000000000000000000000000000000000000072eee2172b9ff5130000000000000000000000000000000000000000000006f3e3ff08688aac7e6b",
        "logIndex": 14,
        "blockHash": "0x375f41f30a4bd9bfa243073682c46d510dc98b6215fc01d06f26363c4a0bbb9d"
      }
    ],
    "blockNumber": 27309304,
    "cumulativeGasUsed": "7510316",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF54576f05753E5917f5566fd45Ff0551C0E65b4c",
    "0xeF8DC81111a873d58dDe27d5D3484F3E63E6bF82"
  ],
  "numDeployments": 1,
  "solcInputHash": "6bfcec23dfd703357eff93ebcb15a897",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IImageStorage\",\"name\":\"staticImageStorage\",\"type\":\"address\"},{\"internalType\":\"contract IImageStorage\",\"name\":\"dynamicImageStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"DAOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DAOJoined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIV3_AVATAR_NFT\",\"outputs\":[{\"internalType\":\"contract Giv3AvatarNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIV3_NFT_FACTORY\",\"outputs\":[{\"internalType\":\"contract Giv3NFTFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIV3_TREASURY_FACTORY\",\"outputs\":[{\"internalType\":\"contract Giv3TreasuryFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPowerLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"joinDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_giv3NFTFactory\",\"type\":\"address\"}],\"name\":\"setGiv3NFTFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasuryIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createDAO(string,string,string)\":{\"details\":\"Include a offchain signer to verify if the structure of the datafile is correct\",\"params\":{\"description\":\"Description of the DAO\",\"name\":\"The name of the DAO.\",\"symbol\":\"The symbol of the DAO.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDAO(string,string,string)\":{\"notice\":\"Create a new DAO.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Giv3Core.sol\":\"Giv3Core\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf82090d06cc06c498ae5847e389e1fe8cef231e9cf19f81fee476cf581e4519d\",\"license\":\"MIT\"},\"contracts/Giv3AvatarNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\n\\r\\ncontract Giv3AvatarNFT is ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct CompoundImageData {\\r\\n        uint256 layer_1_index;\\r\\n        uint256 layer_2_index;\\r\\n        uint256 layer_3_index;\\r\\n        uint256 layer_4_index;\\r\\n        uint256 layer_5_index;\\r\\n    }\\r\\n\\r\\n    address public storageContract;\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    string[] private z = [\\r\\n        '<svg width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 32 32\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\r\\n        '\\\"<image width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"',\\r\\n        '\\\"/> <image width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"',\\r\\n        '\\\"/> <image width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"',\\r\\n        '\\\"/> <image width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"',\\r\\n        '\\\"/> <image width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"',\\r\\n        '\\\"/> </svg>'\\r\\n    ];\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        IGiv3Core _giv3Core\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n    }\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to) external onlyGiv3 {\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        _currentIndex++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    function genPNG(CompoundImageData memory data)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // Get Token Power levels\\r\\n        uint256 power_1 = data.layer_1_index;\\r\\n        uint256 power_2 = data.layer_2_index;\\r\\n        uint256 power_3 = data.layer_3_index;\\r\\n        uint256 power_4 = data.layer_4_index;\\r\\n        uint256 power_5 = data.layer_5_index;\\r\\n\\r\\n        // Get Image Levels\\r\\n        string memory layer_1 = IImageStorage(storageContract).getLayer1(\\r\\n            power_1\\r\\n        );\\r\\n        string memory layer_2 = IImageStorage(storageContract).getLayer2(\\r\\n            power_2\\r\\n        );\\r\\n        string memory layer_3 = IImageStorage(storageContract).getLayer3(\\r\\n            power_3\\r\\n        );\\r\\n        string memory layer_4 = IImageStorage(storageContract).getLayer4(\\r\\n            power_4\\r\\n        );\\r\\n        string memory layer_5 = IImageStorage(storageContract).getLayer5(\\r\\n            power_5\\r\\n        );\\r\\n\\r\\n        // Get Image Data\\r\\n        string memory output = string(\\r\\n            abi.encodePacked(z[0], z[1], layer_1, z[2])\\r\\n        );\\r\\n        output = string(abi.encodePacked(output, layer_2, z[3], layer_3, z[4]));\\r\\n        output = string(abi.encodePacked(output, layer_4, z[5], layer_5, z[6]));\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"TokenID does not exist\\\");\\r\\n\\r\\n        CompoundImageData memory data = CompoundImageData(\\r\\n            GIV3_CORE.getPowerLevels(1, tokenId), // Shoes\\r\\n            GIV3_CORE.getPowerLevels(2, tokenId), // Clothes\\r\\n            GIV3_CORE.getPowerLevels(3, tokenId), // Necklace\\r\\n            GIV3_CORE.getPowerLevels(4, tokenId), // Specs\\r\\n            GIV3_CORE.getPowerLevels(5, tokenId) // Hat\\r\\n        );\\r\\n\\r\\n        string memory json = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\": \\\"',\\r\\n                name(),\\r\\n                \\\"# \\\",\\r\\n                tokenId.toString(),\\r\\n                '\\\",'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"description\\\": \\\"This is a NFT of the first initial of my name!\\\",'\\r\\n            )\\r\\n        );\\r\\n        // hat, specs , necklace, clothes, shoes\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Hat\\\", \\\"value\\\": \\\"',\\r\\n                data.layer_5_index.toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Specs\\\", \\\"value\\\": \\\"',\\r\\n                data.layer_4_index.toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Necklace\\\", \\\"value\\\": \\\"',\\r\\n                data.layer_3_index.toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Clothes\\\", \\\"value\\\": \\\"',\\r\\n                data.layer_2_index.toString(),\\r\\n                '\\\"}',\\r\\n                '{\\\"trait_type\\\": \\\"Shoes\\\", \\\"value\\\": \\\"',\\r\\n                data.layer_1_index.toString(),\\r\\n                '\\\"}],'\\r\\n            )\\r\\n        );\\r\\n\\r\\n        json = Base64.encode(\\r\\n            bytes(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        json,\\r\\n                        '\\\"image_data\\\": \\\"data:image/svg+xml;base64,',\\r\\n                        Base64.encode(bytes(genPNG(data))),\\r\\n                        '\\\"}'\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e1469ef9819d1430fd21f939fef7a0e0e38f9a6767918f118dbddcf1dd1f8ab\",\"license\":\"MIT\"},\"contracts/Giv3Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\nimport \\\"./Giv3NFTFactory.sol\\\";\\r\\nimport \\\"./Giv3TreasuryFactory.sol\\\";\\r\\nimport \\\"./Giv3AvatarNFT.sol\\\";\\r\\n\\r\\ncontract Giv3Core is IGiv3Core {\\r\\n    Giv3NFTFactory public GIV3_NFT_FACTORY;\\r\\n    Giv3TreasuryFactory public GIV3_TREASURY_FACTORY;\\r\\n    Giv3AvatarNFT public GIV3_AVATAR_NFT;\\r\\n\\r\\n    struct DAO {\\r\\n        address contractAddress;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => DAO) public daoIds;\\r\\n    mapping(uint256 => address) public treasuryIds;\\r\\n\\r\\n    uint256 public daoCounter;\\r\\n\\r\\n    event DAOCreated(string name, string symbol, address dao);\\r\\n    event DAOJoined(address indexed member, uint256 indexed _id);\\r\\n\\r\\n    constructor(\\r\\n        IImageStorage staticImageStorage,\\r\\n        IImageStorage dynamicImageStorage\\r\\n    ) {\\r\\n        GIV3_NFT_FACTORY = new Giv3NFTFactory(\\r\\n            IGiv3Core(address(this)),\\r\\n            staticImageStorage,\\r\\n            dynamicImageStorage\\r\\n        );\\r\\n\\r\\n        GIV3_TREASURY_FACTORY = new Giv3TreasuryFactory(\\r\\n            IGiv3Core(address(this))\\r\\n        );\\r\\n\\r\\n        GIV3_AVATAR_NFT = new Giv3AvatarNFT(\\r\\n            \\\"GIV3 Avatar\\\",\\r\\n            \\\"GIV3NFT\\\",\\r\\n            IGiv3Core(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new DAO.\\r\\n     * @param name The name of the DAO.\\r\\n     * @param symbol The symbol of the DAO.\\r\\n     * @param description Description of the DAO\\r\\n     * @dev Include a offchain signer to verify if the structure of the datafile is correct\\r\\n     */\\r\\n    function createDAO(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        Giv3NFT giv3NFT = GIV3_NFT_FACTORY.createCollection(name, symbol);\\r\\n        Giv3Treasury giv3Treasury = GIV3_TREASURY_FACTORY.createTreasury(name);\\r\\n\\r\\n        // Mint GIV3Avatar NFT for user if not already exists\\r\\n        if (GIV3_AVATAR_NFT.balanceOf(msg.sender) == 0) {\\r\\n            GIV3_AVATAR_NFT.mint(msg.sender);\\r\\n        }\\r\\n\\r\\n        daoIds[daoCounter] = DAO(address(giv3NFT), description);\\r\\n        treasuryIds[daoCounter] = address(giv3Treasury);\\r\\n        daoCounter++;\\r\\n        emit DAOCreated(name, symbol, address(giv3NFT));\\r\\n    }\\r\\n\\r\\n    function joinDAO(uint256 _id) public {\\r\\n        require(\\r\\n            GIV3_NFT_FACTORY.getCollection(_id).balanceOf(msg.sender) == 0,\\r\\n            \\\"User already minted\\\"\\r\\n        );\\r\\n        GIV3_NFT_FACTORY.getCollection(_id).mint(msg.sender);\\r\\n\\r\\n        emit DAOJoined(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n    function getContract(uint256 _id) public view returns (address) {\\r\\n        return daoIds[_id].contractAddress;\\r\\n    }\\r\\n\\r\\n    function setGiv3NFTFactory(address _giv3NFTFactory) public {\\r\\n        GIV3_NFT_FACTORY = Giv3NFTFactory(_giv3NFTFactory);\\r\\n    }\\r\\n\\r\\n    function getPowerLevels(uint256 _id, uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return GIV3_NFT_FACTORY.getCollection(_id).getPowerLevel(_tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9573ae125bb65ee9a9183367ee3567b703506128e7ae9efe63f12431d7cec8f0\",\"license\":\"MIT\"},\"contracts/Giv3NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\n\\r\\ncontract Giv3NFT is ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Store data about the contributions made by a user holding the token\\r\\n    struct Contribution {\\r\\n        string ipfsHash;\\r\\n        uint256 upvotes;\\r\\n        uint256 downvotes;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Contribution[]) contributions;\\r\\n    mapping(uint256 => uint256) donations;\\r\\n    mapping(uint256 => uint256) experience;\\r\\n    mapping(uint256 => uint256) energy;\\r\\n    mapping(uint256 => uint256) mintedTime;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    IImageStorage public IMAGE_STORAGE;\\r\\n    string public baseURI;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    // Weight Multipliers for the different types of contributions\\r\\n    uint256[3] public mul = [1, 1, 1];\\r\\n\\r\\n    uint256 public collectionIndex;\\r\\n\\r\\n    event DonationAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event ExperienceAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event EnergyAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        IGiv3Core _giv3Core,\\r\\n        uint256 _collectionIndex,\\r\\n        IImageStorage _imageStorageAddress // ImageStorageStatic Address\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        IMAGE_STORAGE = _imageStorageAddress;\\r\\n        collectionIndex = _collectionIndex;\\r\\n    }\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to) external onlyGiv3 returns (uint256) {\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        mintedTime[_currentIndex] = block.timestamp;\\r\\n        _currentIndex++;\\r\\n        return _currentIndex - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Donation balance.\\r\\n     */\\r\\n    function addDonation(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        donations[tokenId] += amount;\\r\\n        emit DonationAdded(msg.sender, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Experience balance.\\r\\n     */\\r\\n    function addExperience(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        experience[tokenId] += amount;\\r\\n        emit ExperienceAdded(msg.sender, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Energy balance.\\r\\n     */\\r\\n    function addEnergy(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        energy[tokenId] += amount;\\r\\n        emit EnergyAdded(msg.sender, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     * @dev gets baseURI from contract state variable\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return buildMetadata(tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the metadata required in accordance ot Opensea requirements\\r\\n    /// @param _tokenId Policy ID which will also be the NFT token ID\\r\\n    /// @dev Can change public to internal\\r\\n    function buildMetadata(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 _powerlevel = getPowerLevel(_tokenId);\\r\\n        string memory image;\\r\\n        // NFTS that level up based on the governance score of the token.\\r\\n        // Get Image from Image Storage Contract\\r\\n        image = IMAGE_STORAGE.getImageForCollection(\\r\\n            collectionIndex,\\r\\n            _powerlevel\\r\\n        );\\r\\n        bytes memory m1 = abi.encodePacked(\\r\\n            '{\\\"name\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"description\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            image,\\r\\n            // adding policyHolder\\r\\n            '\\\", \\\"attributes\\\": [{\\\"trait_type\\\":\\\"Power Level\\\",',\\r\\n            '\\\"value\\\":\\\"',\\r\\n            Strings.toString(_powerlevel),\\r\\n            '\\\"}]}'\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(bytes.concat(m1))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getUpvotes(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return contributions[tokenId][index].upvotes;\\r\\n    }\\r\\n\\r\\n    function getDownvotes(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return contributions[tokenId][index].downvotes;\\r\\n    }\\r\\n\\r\\n    function getTotalUpvotes(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _totalUpvotes)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            _totalUpvotes += contributions[tokenId][i].upvotes;\\r\\n        }\\r\\n        return _totalUpvotes;\\r\\n    }\\r\\n\\r\\n    function getTotalDownvotes(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _totalDownvotes)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            _totalDownvotes += contributions[tokenId][i].downvotes;\\r\\n        }\\r\\n        return _totalDownvotes;\\r\\n    }\\r\\n\\r\\n    function getContribution(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"https://ipfs.io/ipfs/\\\",\\r\\n                    contributions[tokenId][index].ipfsHash\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getAllContributions(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory contributionsString = \\\"\\\";\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            if (i + 1 < contributions[tokenId].length) {\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        contributionsString,\\r\\n                        \\\"https://ipfs.io/ipfs/\\\",\\r\\n                        contributions[tokenId][i].ipfsHash,\\r\\n                        \\\",\\\"\\r\\n                    )\\r\\n                );\\r\\n            } else {\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        contributionsString,\\r\\n                        \\\"https://ipfs.io/ipfs/\\\",\\r\\n                        contributions[tokenId][i].ipfsHash\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return contributionsString;\\r\\n    }\\r\\n\\r\\n    function getContributionCount(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _contributionCount)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return contributions[tokenId].length;\\r\\n    }\\r\\n\\r\\n    function getTimeScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return (block.timestamp - mintedTime[tokenId]) / 1 days;\\r\\n    }\\r\\n\\r\\n    function getDonationScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return donations[tokenId];\\r\\n    }\\r\\n\\r\\n    function getExperienceScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return experience[tokenId];\\r\\n    }\\r\\n\\r\\n    function getEnergyScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return energy[tokenId];\\r\\n    }\\r\\n\\r\\n    function getPowerLevel(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _powerLevel)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        uint256 _donationScore = getDonationScore(tokenId);\\r\\n        uint256 _experienceScore = getExperienceScore(tokenId);\\r\\n        uint256 _energyScore = getEnergyScore(tokenId);\\r\\n\\r\\n        _powerLevel =\\r\\n            mul[0] *\\r\\n            _donationScore +\\r\\n            mul[1] *\\r\\n            _experienceScore +\\r\\n            mul[2] *\\r\\n            _energyScore;\\r\\n\\r\\n        return _powerLevel;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe947b04334463134018885561cd045a880221427e0dea8a27cd3f5fd4ea4b96f\",\"license\":\"MIT\"},\"contracts/Giv3NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./Giv3NFT.sol\\\";\\r\\n\\r\\ncontract Giv3NFTFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => Giv3NFT) collections;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    IImageStorage public STATIC_IMAGE_STORAGE;\\r\\n    IImageStorage public DYNAMIC_IMAGE_STORAGE;\\r\\n\\r\\n    event CollectionCreated(uint256 id, address collection);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IGiv3Core _giv3Core,\\r\\n        IImageStorage _staticImageStorage,\\r\\n        IImageStorage _dynamicImageStorage\\r\\n    ) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        STATIC_IMAGE_STORAGE = _staticImageStorage;\\r\\n        DYNAMIC_IMAGE_STORAGE = _dynamicImageStorage;\\r\\n    }\\r\\n\\r\\n    function createCollection(string memory name, string memory symbol)\\r\\n        public\\r\\n        onlyGiv3\\r\\n        returns (Giv3NFT)\\r\\n    {\\r\\n        Giv3NFT giv3Address = new Giv3NFT(\\r\\n            name,\\r\\n            symbol,\\r\\n            GIV3_CORE,\\r\\n            collectionsCounter,\\r\\n            STATIC_IMAGE_STORAGE\\r\\n        );\\r\\n\\r\\n        collections[collectionsCounter] = giv3Address;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        return giv3Address;\\r\\n        // emit CollectionCreated()\\r\\n    }\\r\\n\\r\\n    function getCollection(uint256 id) public view returns (Giv3NFT) {\\r\\n        return collections[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e5ffe6b3fde7c043589d22c5c3e297a5930b076897389102dc49059dfbd4037\",\"license\":\"MIT\"},\"contracts/Giv3Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// import erc20\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\n\\r\\ncontract Giv3Treasury {\\r\\n    uint256 public ethBalance;\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => uint256) public tokenBalances;\\r\\n\\r\\n    event ETHDeposited(uint256 amount);\\r\\n    event ETHWithdrawn(uint256 amount, address to);\\r\\n    event TokenDeposited(IERC20 tokenAddress, uint256 amount);\\r\\n    event TokenWithdrawn(IERC20 tokenAddress, uint256 amount, address to);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(string memory _name, IGiv3Core _giv3Core) {\\r\\n        name = _name;\\r\\n        GIV3_CORE = _giv3Core;\\r\\n    }\\r\\n\\r\\n    function depositETH() public payable onlyGiv3 {\\r\\n        ethBalance += msg.value;\\r\\n        uint256 amount = msg.value;\\r\\n        emit ETHDeposited(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawETH(address to, uint256 amount) public payable onlyGiv3 {\\r\\n        require(amount <= ethBalance, \\\"Not enough ETH\\\");\\r\\n        ethBalance -= amount;\\r\\n        to.call{value: amount}(\\\"\\\");\\r\\n        emit ETHWithdrawn(amount, to);\\r\\n    }\\r\\n\\r\\n    function depositToken(IERC20 tokenAddress, uint256 amount) public onlyGiv3 {\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        tokenAddress.transfer(msg.sender, amount);\\r\\n        emit TokenDeposited(tokenAddress, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(\\r\\n        IERC20 tokenAddress,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) public onlyGiv3 {\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(\\r\\n            tokenAddress.balanceOf(msg.sender) >= amount,\\r\\n            \\\"Not enough tokens\\\"\\r\\n        );\\r\\n        tokenAddress.transfer(to, amount);\\r\\n        emit TokenWithdrawn(tokenAddress, amount, to);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xba087d8c8cb95f99d34358d3c7316c29acb536bb9e11e681b1137f9a2d57b99a\",\"license\":\"MIT\"},\"contracts/Giv3TreasuryFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./Giv3Treasury.sol\\\";\\r\\n\\r\\ncontract Giv3TreasuryFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => Giv3Treasury) treasuries;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n\\r\\n    event TreasuryCreated(uint256 id, string name);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(IGiv3Core _giv3Core) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n    }\\r\\n\\r\\n    function createTreasury(string memory name)\\r\\n        public\\r\\n        onlyGiv3\\r\\n        returns (Giv3Treasury)\\r\\n    {\\r\\n        Giv3Treasury giv3Treasury = new Giv3Treasury(name, GIV3_CORE);\\r\\n\\r\\n        treasuries[collectionsCounter] = giv3Treasury;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        emit TreasuryCreated(collectionsCounter - 1, name);\\r\\n        return giv3Treasury;\\r\\n    }\\r\\n\\r\\n    function getCollection(uint256 id) public view returns (Giv3Treasury) {\\r\\n        return treasuries[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd9ea1a798c358e5d75edcc9038ea6492943b7574b5136a80b4e41027f43c9ddb\",\"license\":\"MIT\"},\"contracts/interface/IGiv3Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IGiv3Core {\\r\\n    function createDAO(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory metadataHash\\r\\n    ) external;\\r\\n\\r\\n    function joinDAO(uint256 _id) external;\\r\\n\\r\\n    function getContract(uint256 _id) external view returns (address);\\r\\n\\r\\n    function setGiv3NFTFactory(address _giv3NFTFactory) external;\\r\\n\\r\\n    function getPowerLevels(uint256 _id, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xbc059539545f48cb27b561b2633782125ad82bb28103431321408454678a6741\",\"license\":\"MIT\"},\"contracts/interface/IImageStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IImageStorage {\\r\\n    function getBody() external view returns (string memory);\\r\\n\\r\\n    function getLayer1(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer2(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer3(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer4(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer5(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getImageForCollection(uint256 collectionIndex, uint256 imageIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x52d05ec6c522913daa9030d1bb71ce9873dae3355edaaa6f739acdcc5e4299e9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200743b3803806200743b8339810160408190526200003491620001f0565b3082826040516200004590620001a9565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f08015801562000082573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040513090620000b390620001b7565b6001600160a01b039091168152602001604051809103906000f080158015620000e0573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905560405130906200011190620001c5565b6060808252600b908201526a23a4ab199020bb30ba30b960a91b608082015260a0602082018190526007908201526611d2558cd3919560ca1b60c08201526001600160a01b03909116604082015260e001604051809103906000f0801580156200017f573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b039290921691909117905550620002289050565b612e058062000e8283390190565b610f2c8062003c8783390190565b6128888062004bb383390190565b80516001600160a01b0381168114620001eb57600080fd5b919050565b600080604083850312156200020457600080fd5b6200020f83620001d3565b91506200021f60208401620001d3565b90509250929050565b610c4a80620002386000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636ebc8c86116100715780636ebc8c8614610157578063c5594ef314610180578063c5cc085814610193578063cfb83a8d146101bc578063f5c8d232146101cf578063f80efd28146101f057600080fd5b806318cd2989146100ae5780632d506fe1146100de5780633fbdf32c146100ff57806347dc3621146101145780636b1b2e0f14610144575b600080fd5b6000546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec3660046108e7565b6101f9565b6040519081526020016100d5565b61011261010d366004610909565b6102dc565b005b61011261012236600461093a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546100c1906001600160a01b031681565b6100c1610165366004610909565b6000908152600360205260409020546001600160a01b031690565b6002546100c1906001600160a01b031681565b6100c16101a1366004610909565b6004602052600090815260409020546001600160a01b031681565b6101126101ca3660046109fa565b610504565b6101e26101dd366004610909565b61079f565b6040516100d5929190610acf565b6100f160055481565b60008054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102679190610afb565b6001600160a01b031663d2e59bfe836040518263ffffffff1660e01b815260040161029491815260200190565b602060405180830381865afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190610b18565b9392505050565b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610afb565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b39190610b18565b156103fa5760405162461bcd60e51b8152602060048201526013602482015272155cd95c88185b1c9958591e481b5a5b9d1959606a1b604482015260640160405180910390fd5b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190610afb565b6040516335313c2160e11b81523360048201526001600160a01b039190911690636a627842906024016020604051808303816000875af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190610b18565b50604051819033907fc6fe9b78def1629047bd69918cbc1ef87aeefe1543a67e54cb8fcd50711ec6ce90600090a350565b6000805460405163176b9b7560e01b81526001600160a01b039091169063176b9b75906105379087908790600401610b31565b6020604051808303816000875af1158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190610afb565b600154604051634749180960e11b81529192506000916001600160a01b0390911690638e923012906105b0908890600401610b5f565b6020604051808303816000875af11580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f39190610afb565b6002546040516370a0823160e01b81523360048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190610b18565b6106c2576002546040516335313c2160e11b81523360048201526001600160a01b0390911690636a62784290602401600060405180830381600087803b1580156106a957600080fd5b505af11580156106bd573d6000803e3d6000fd5b505050505b6040805180820182526001600160a01b038481168252602080830187815260055460009081526003835294909420835181546001600160a01b0319169316929092178255925180519293919261071e926001850192019061084e565b505060058054600090815260046020526040812080546001600160a01b0319166001600160a01b0386161790558154925061075883610b72565b91905055507f6d8073b3c5d7e3a29e9539222aa4da4b3728f3e94edcef7840a1fc244e51deaf85858460405161079093929190610b9b565b60405180910390a15050505050565b600360205260009081526040902080546001820180546001600160a01b0390921692916107cb90610bd9565b80601f01602080910402602001604051908101604052809291908181526020018280546107f790610bd9565b80156108445780601f1061081957610100808354040283529160200191610844565b820191906000526020600020905b81548152906001019060200180831161082757829003601f168201915b5050505050905082565b82805461085a90610bd9565b90600052602060002090601f01602090048101928261087c57600085556108c2565b82601f1061089557805160ff19168380011785556108c2565b828001600101855582156108c2579182015b828111156108c25782518255916020019190600101906108a7565b506108ce9291506108d2565b5090565b5b808211156108ce57600081556001016108d3565b600080604083850312156108fa57600080fd5b50508035926020909101359150565b60006020828403121561091b57600080fd5b5035919050565b6001600160a01b038116811461093757600080fd5b50565b60006020828403121561094c57600080fd5b81356102d581610922565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261097e57600080fd5b813567ffffffffffffffff8082111561099957610999610957565b604051601f8301601f19908116603f011681019082821181831017156109c1576109c1610957565b816040528381528660208588010111156109da57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610a0f57600080fd5b833567ffffffffffffffff80821115610a2757600080fd5b610a338783880161096d565b94506020860135915080821115610a4957600080fd5b610a558783880161096d565b93506040860135915080821115610a6b57600080fd5b50610a788682870161096d565b9150509250925092565b6000815180845260005b81811015610aa857602081850181015186830182015201610a8c565b81811115610aba576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610af390830184610a82565b949350505050565b600060208284031215610b0d57600080fd5b81516102d581610922565b600060208284031215610b2a57600080fd5b5051919050565b604081526000610b446040830185610a82565b8281036020840152610b568185610a82565b95945050505050565b6020815260006102d56020830184610a82565b6000600019821415610b9457634e487b7160e01b600052601160045260246000fd5b5060010190565b606081526000610bae6060830186610a82565b8281036020840152610bc08186610a82565b91505060018060a01b0383166040830152949350505050565b600181811c90821680610bed57607f821691505b60208210811415610c0e57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a828af0bbdb7c143fb0f4f48631852327d795259421eb3e53f81cb27a6a1db2364736f6c634300080a003360806040526000805534801561001457600080fd5b50604051612e05380380612e058339810160408190526100339161008d565b600280546001600160a01b039485166001600160a01b0319918216179091556003805493851693821693909317909255600480549190931691161790556100da565b6001600160a01b038116811461008a57600080fd5b50565b6000806000606084860312156100a257600080fd5b83516100ad81610075565b60208501519093506100be81610075565b60408501519092506100cf81610075565b809150509250925092565b612d1c806100e96000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063176b9b751461005c5780635a1f3c281461008b578063897a2504146100b45780638e4aa826146100c75780639518a3e9146100da575b600080fd5b61006f61006a366004610252565b6100ed565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100993660046102b6565b6000908152600160205260409020546001600160a01b031690565b60035461006f906001600160a01b031681565b60045461006f906001600160a01b031681565b60025461006f906001600160a01b031681565b6002546000906001600160a01b0316331461010757600080fd5b600254600080546003546040519293879387936001600160a01b039283169390921690610133906101a2565b61014195949392919061031c565b604051809103906000f08015801561015d573d6000803e3d6000fd5b5060008054815260016020526040812080546001600160a01b0319166001600160a01b0384161790558054919250806101958361036c565b9091555090949350505050565b6129518061039683390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101d657600080fd5b813567ffffffffffffffff808211156101f1576101f16101af565b604051601f8301601f19908116603f01168101908282118183101715610219576102196101af565b8160405283815286602085880101111561023257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561026557600080fd5b823567ffffffffffffffff8082111561027d57600080fd5b610289868387016101c5565b9350602085013591508082111561029f57600080fd5b506102ac858286016101c5565b9150509250929050565b6000602082840312156102c857600080fd5b5035919050565b6000815180845260005b818110156102f5576020818501810151868301820152016102d9565b81811115610307576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061032f60a08301886102cf565b828103602084015261034181886102cf565b6001600160a01b03968716604085015260608401959095525050921660809092019190915292915050565b600060001982141561038e57634e487b7160e01b600052601160045260246000fd5b506001019056fe60e06040526001608081815260a082905260c0919091526200002690600f906003620000c5565b503480156200003457600080fd5b506040516200295138038062002951833981016040819052620000579162000287565b845185908590620000709060009060208501906200010d565b508051620000869060019060208401906200010d565b5050600b80546001600160a01b039586166001600160a01b031991821617909155600c8054939095169216919091179092556012555062000364915050565b8260038101928215620000fb579160200282015b82811115620000fb578251829060ff16905591602001919060010190620000d9565b50620001099291506200018a565b5090565b8280546200011b9062000327565b90600052602060002090601f0160209004810192826200013f5760008555620000fb565b82601f106200015a57805160ff1916838001178555620000fb565b82800160010185558215620000fb579182015b82811115620000fb5782518255916020019190600101906200016d565b5b808211156200010957600081556001016200018b565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001c957600080fd5b81516001600160401b0380821115620001e657620001e6620001a1565b604051601f8301601f19908116603f01168101908282118183101715620002115762000211620001a1565b816040528381526020925086838588010111156200022e57600080fd5b600091505b8382101562000252578582018301518183018401529082019062000233565b83821115620002645760008385830101525b9695505050505050565b6001600160a01b03811681146200028457600080fd5b50565b600080600080600060a08688031215620002a057600080fd5b85516001600160401b0380821115620002b857600080fd5b620002c689838a01620001b7565b96506020880151915080821115620002dd57600080fd5b50620002ec88828901620001b7565b9450506040860151620002ff816200026e565b60608701516080880151919450925062000319816200026e565b809150509295509295909350565b600181811c908216806200033c57607f821691505b602082108114156200035e57634e487b7160e01b600052602260045260246000fd5b50919050565b6125dd80620003746000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80636a62784211610125578063b88d4fde116100ad578063d2e59bfe1161007c578063d2e59bfe1461048b578063d87ffb701461049e578063e985e9c5146104b1578063edf87704146104ed578063ff37868b1461050057600080fd5b8063b88d4fde1461043f578063c87b56dd14610452578063cec1da9e14610465578063cf08a1aa1461047857600080fd5b80639518a3e9116100f45780639518a3e9146103eb57806395d89b41146103fe578063a22cb46514610406578063a26b967f14610419578063b2dfa0071461042c57600080fd5b80636a627842146103aa5780636c0360eb146103bd57806370a08231146103c55780637963b193146103d857600080fd5b806323b872dd116101a8578063495ff7b711610177578063495ff7b71461035557806356100e14146103685780635be980671461037b5780635d240c58146103845780636352211e1461039757600080fd5b806323b872dd14610309578063402533c11461031c57806342842e0e1461032f57806349015aac1461034257600080fd5b8063095ea7b3116101ef578063095ea7b3146102aa578063131e2f18146102bf57806317ef8ae6146102d257806318160ddd146102e55780631e8f9ffa146102f657600080fd5b806301ffc9a71461022157806306fdde031461024957806307e229ae1461025e578063081812fc1461027f575b600080fd5b61023461022f366004611c3c565b610513565b60405190151581526020015b60405180910390f35b610251610565565b6040516102409190611cb8565b61027161026c366004611ccb565b6105f7565b604051908152602001610240565b61029261028d366004611ccb565b61063a565b6040516001600160a01b039091168152602001610240565b6102bd6102b8366004611cfb565b610661565b005b6102716102cd366004611ccb565b610777565b6102716102e0366004611ccb565b61078e565b600e546001600160801b0316610271565b600c54610292906001600160a01b031681565b6102bd610317366004611d25565b6107c8565b61025161032a366004611d61565b6107f9565b6102bd61033d366004611d25565b610878565b610271610350366004611ccb565b610893565b610271610363366004611d61565b6108cd565b6102bd610376366004611d61565b61092e565b61027160125481565b6102bd610392366004611d61565b6109dd565b6102926103a5366004611ccb565b610a84565b6102716103b8366004611d83565b610ae4565b610251610b87565b6102716103d3366004611d83565b610c15565b6102716103e6366004611d61565b610c9b565b600b54610292906001600160a01b031681565b610251610cfc565b6102bd610414366004611d9e565b610d0b565b610271610427366004611ccb565b610d1a565b61027161043a366004611ccb565b610d54565b6102bd61044d366004611e49565b610deb565b610251610460366004611ccb565b610e23565b610271610473366004611ccb565b610e53565b610271610486366004611ccb565b610ea2565b610271610499366004611ccb565b610f33565b6102bd6104ac366004611d61565b610fc9565b6102346104bf366004611ef4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102516104fb366004611ccb565b611070565b61025161050e366004611ccb565b611197565b60006001600160e01b031982166380ac58cd60e01b148061054457506001600160e01b03198216635b5e139f60e01b145b8061055f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461057490611f27565b80601f01602080910402602001604051908101604052809291908181526020018280546105a090611f27565b80156105ed5780601f106105c2576101008083540402835291602001916105ed565b820191906000526020600020905b8154815290600101906020018083116105d057829003601f168201915b5050505050905090565b6000610602826112ca565b6106275760405162461bcd60e51b815260040161061e90611f5c565b60405180910390fd5b5060009081526007602052604090205490565b6000610645826112e7565b506000908152600460205260409020546001600160a01b031690565b600061066c82610a84565b9050806001600160a01b0316836001600160a01b031614156106da5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161061e565b336001600160a01b03821614806106f657506106f681336104bf565b6107685760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161061e565b610772838361133a565b505050565b600f816003811061078757600080fd5b0154905081565b6000610799826112ca565b6107b55760405162461bcd60e51b815260040161061e90611f5c565b5060009081526009602052604090205490565b6107d233826113a8565b6107ee5760405162461bcd60e51b815260040161061e90611fab565b610772838383611427565b6060610804836112ca565b6108205760405162461bcd60e51b815260040161061e90611f5c565b600083815260066020526040902080548390811061084057610840611ff9565b906000526020600020906003020160000160405160200161086191906120a9565b604051602081830303815290604052905092915050565b61077283838360405180602001604052806000815250610deb565b600061089e826112ca565b6108ba5760405162461bcd60e51b815260040161061e90611f5c565b5060009081526008602052604090205490565b60006108d8836112ca565b6108f45760405162461bcd60e51b815260040161061e90611f5c565b600083815260066020526040902080548390811061091457610914611ff9565b906000526020600020906003020160020154905092915050565b600b546001600160a01b0316331461094557600080fd5b61094e81610a84565b6001600160a01b0316326001600160a01b03161461097e5760405162461bcd60e51b815260040161061e906120d3565b6000818152600960205260408120805484929061099c90849061212e565b9091555050604051828152819033907f42e702cca92cac2a67fd87ece90cd65cdc0bdee9a7ae20dc725b73b263468af5906020015b60405180910390a35050565b600b546001600160a01b031633146109f457600080fd5b6109fd81610a84565b6001600160a01b0316326001600160a01b031614610a2d5760405162461bcd60e51b815260040161061e906120d3565b60008181526008602052604081208054849290610a4b90849061212e565b9091555050604051828152819033907f81665166aed8384c9df23393834f1b549569bbb3ca825f52f8390f1bbe163871906020016109d1565b6000818152600260205260408120546001600160a01b03168061055f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161061e565b600b546000906001600160a01b03163314610afe57600080fd5b600e54610b159083906001600160801b03166115ce565b600e80546001600160801b039081166000908152600a6020526040812042905582549091169190610b4583612146565b82546101009290920a6001600160801b03818102199093169183160217909155600e54610b7692506001911661216d565b6001600160801b031690505b919050565b600d8054610b9490611f27565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc090611f27565b8015610c0d5780601f10610be257610100808354040283529160200191610c0d565b820191906000526020600020905b815481529060010190602001808311610bf057829003601f168201915b505050505081565b60006001600160a01b038216610c7f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161061e565b506001600160a01b031660009081526003602052604090205490565b6000610ca6836112ca565b610cc25760405162461bcd60e51b815260040161061e90611f5c565b6000838152600660205260409020805483908110610ce257610ce2611ff9565b906000526020600020906003020160010154905092915050565b60606001805461057490611f27565b610d163383836115e8565b5050565b6000610d25826112ca565b610d415760405162461bcd60e51b815260040161061e90611f5c565b5060009081526006602052604090205490565b6000610d5f826112ca565b610d7b5760405162461bcd60e51b815260040161061e90611f5c565b60005b600083815260066020526040902054811015610de5576000838152600660205260409020805482908110610db457610db4611ff9565b90600052602060002090600302016001015482610dd1919061212e565b915080610ddd81612195565b915050610d7e565b50919050565b610df533836113a8565b610e115760405162461bcd60e51b815260040161061e90611fab565b610e1d848484846116b7565b50505050565b6060610e2e826112ca565b610e4a5760405162461bcd60e51b815260040161061e90611f5c565b61055f82611070565b6000610e5e826112ca565b610e7a5760405162461bcd60e51b815260040161061e90611f5c565b6000828152600a60205260409020546201518090610e9890426121b0565b61055f91906121dd565b6000610ead826112ca565b610ec95760405162461bcd60e51b815260040161061e90611f5c565b60005b600083815260066020526040902054811015610de5576000838152600660205260409020805482908110610f0257610f02611ff9565b90600052602060002090600302016002015482610f1f919061212e565b915080610f2b81612195565b915050610ecc565b6000610f3e826112ca565b610f5a5760405162461bcd60e51b815260040161061e90611f5c565b6000610f65836105f7565b90506000610f7284610893565b90506000610f7f8561078e565b601154909150610f909082906121f1565b601054610f9e9084906121f1565b600f54610fac9086906121f1565b610fb6919061212e565b610fc0919061212e565b95945050505050565b600b546001600160a01b03163314610fe057600080fd5b610fe981610a84565b6001600160a01b0316326001600160a01b0316146110195760405162461bcd60e51b815260040161061e906120d3565b6000818152600760205260408120805484929061103790849061212e565b9091555050604051828152819033907f871d2dd633714517795b5e7c02e648de931e9a9d914f99baf5a96995e096be48906020016109d1565b6060600061107d83610f33565b600c54601254604051639518c22760e01b81529293506060926001600160a01b0390921691639518c227916110bf918690600401918252602082015260400190565b600060405180830381865afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190612210565b90506000611110610565565b611118610565565b83611122866116ea565b604051602001611135949392919061229a565b604051602081830303815290604052905061116e8160405160200161115a91906123b7565b6040516020818303038152906040526117e8565b60405160200161117e91906123d3565b6040516020818303038152906040529350505050919050565b60606111a2826112ca565b6111be5760405162461bcd60e51b815260040161061e90611f5c565b604080516020810190915260008082525b6000848152600660205260409020548110156112c3576000848152600660205260409020546111ff82600161212e565b101561125d57600084815260066020526040902080548391908390811061122857611228611ff9565b906000526020600020906003020160000160405160200161124a929190612418565b60408051601f19818403019052526112b1565b600084815260066020526040902080548391908390811061128057611280611ff9565b90600052602060002090600302016000016040516020016112a2929190612469565b60408051601f19818403019052525b806112bb81612195565b9150506111cf565b5092915050565b6000908152600260205260409020546001600160a01b0316151590565b6112f0816112ca565b6113375760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161061e565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061136f82610a84565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806113b483610a84565b9050806001600160a01b0316846001600160a01b031614806113fb57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061141f5750836001600160a01b03166114148461063a565b6001600160a01b0316145b949350505050565b826001600160a01b031661143a82610a84565b6001600160a01b03161461149e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161061e565b6001600160a01b0382166115005760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161061e565b61150b838383611950565b61151660008261133a565b6001600160a01b038316600090815260036020526040812080546001929061153f9084906121b0565b90915550506001600160a01b038216600090815260036020526040812080546001929061156d90849061212e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610d168282604051806020016040528060008152506119b6565b816001600160a01b0316836001600160a01b0316141561164a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161061e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116c2848484611427565b6116ce848484846119e9565b610e1d5760405162461bcd60e51b815260040161061e906124a7565b60608161170e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611738578061172281612195565b91506117319050600a836121dd565b9150611712565b60008167ffffffffffffffff81111561175357611753611dda565b6040519080825280601f01601f19166020018201604052801561177d576020820181803683370190505b5090505b841561141f576117926001836121b0565b915061179f600a866124f9565b6117aa90603061212e565b60f81b8183815181106117bf576117bf611ff9565b60200101906001600160f81b031916908160001a9053506117e1600a866121dd565b9450611781565b606081516000141561180857505060408051602081019091526000815290565b60006040518060600160405280604081526020016125686040913990506000600384516002611837919061212e565b61184191906121dd565b61184c9060046121f1565b9050600061185b82602061212e565b67ffffffffffffffff81111561187357611873611dda565b6040519080825280601f01601f19166020018201604052801561189d576020820181803683370190505b509050818152600183018586518101602084015b8183101561190b5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016118b1565b600389510660018114611925576002811461193657611942565b613d3d60f01b600119830152611942565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b038316156107725760405162461bcd60e51b815260206004820152602660248201527f4552433732313a207472616e736665722066726f6d206e6f6e2d7a65726f206160448201526564647265737360d01b606482015260840161061e565b6119c08383611ae7565b6119cd60008484846119e9565b6107725760405162461bcd60e51b815260040161061e906124a7565b60006001600160a01b0384163b15611adc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611a2d90339089908890889060040161250d565b6020604051808303816000875af1925050508015611a68575060408051601f3d908101601f19168201909252611a659181019061254a565b60015b611ac2573d808015611a96576040519150601f19603f3d011682016040523d82523d6000602084013e611a9b565b606091505b508051611aba5760405162461bcd60e51b815260040161061e906124a7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061141f565b506001949350505050565b6001600160a01b038216611b3d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161061e565b611b46816112ca565b15611b935760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161061e565b611b9f60008383611950565b6001600160a01b0382166000908152600360205260408120805460019290611bc890849061212e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461133757600080fd5b600060208284031215611c4e57600080fd5b8135611c5981611c26565b9392505050565b60005b83811015611c7b578181015183820152602001611c63565b83811115610e1d5750506000910152565b60008151808452611ca4816020860160208601611c60565b601f01601f19169290920160200192915050565b602081526000611c596020830184611c8c565b600060208284031215611cdd57600080fd5b5035919050565b80356001600160a01b0381168114610b8257600080fd5b60008060408385031215611d0e57600080fd5b611d1783611ce4565b946020939093013593505050565b600080600060608486031215611d3a57600080fd5b611d4384611ce4565b9250611d5160208501611ce4565b9150604084013590509250925092565b60008060408385031215611d7457600080fd5b50508035926020909101359150565b600060208284031215611d9557600080fd5b611c5982611ce4565b60008060408385031215611db157600080fd5b611dba83611ce4565b915060208301358015158114611dcf57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1957611e19611dda565b604052919050565b600067ffffffffffffffff821115611e3b57611e3b611dda565b50601f01601f191660200190565b60008060008060808587031215611e5f57600080fd5b611e6885611ce4565b9350611e7660208601611ce4565b925060408501359150606085013567ffffffffffffffff811115611e9957600080fd5b8501601f81018713611eaa57600080fd5b8035611ebd611eb882611e21565b611df0565b818152886020838501011115611ed257600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611f0757600080fd5b611f1083611ce4565b9150611f1e60208401611ce4565b90509250929050565b600181811c90821680611f3b57607f821691505b60208210811415610de557634e487b7160e01b600052602260045260246000fd5b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c908083168061202957607f831692505b602080841082141561204b57634e487b7160e01b600052602260045260246000fd5b81801561205f57600181146120705761209d565b60ff1986168952848901965061209d565b60008881526020902060005b868110156120955781548b82015290850190830161207c565b505084890196505b50505050505092915050565b7468747470733a2f2f697066732e696f2f697066732f60581b81526000611c59601583018461200f565b60208082526025908201527f4f6e6c7920746865206f776e65722063616e20616464206120636f6e747269626040820152643aba34b7b760d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561214157612141612118565b500190565b60006001600160801b038083168181141561216357612163612118565b6001019392505050565b60006001600160801b038381169083168181101561218d5761218d612118565b039392505050565b60006000198214156121a9576121a9612118565b5060010190565b6000828210156121c2576121c2612118565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826121ec576121ec6121c7565b500490565b600081600019048311821515161561220b5761220b612118565b500290565b60006020828403121561222257600080fd5b815167ffffffffffffffff81111561223957600080fd5b8201601f8101841361224a57600080fd5b8051612258611eb882611e21565b81815285602083850101111561226d57600080fd5b610fc0826020830160208601611c60565b60008151612290818560208601611c60565b9290920192915050565b683d913730b6b2911d1160b91b815284516000906122bf816009850160208a01611c60565b6a0204d656d626572736869760ac1b600991840191820181905271111610113232b9b1b934b83a34b7b7111d1160711b60148301528651612307816026850160208b01611c60565b60269201918201526c1116101134b6b0b3b2911d101160991b6031820152845161233881603e840160208901611c60565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a9101603e8101919091526d08941bddd95c8813195d995b088b60921b605e82015268113b30b63ab2911d1160b91b606c8201526123ac61239c607583018661227e565b63227d5d7d60e01b815260040190565b979650505050505050565b600082516123c9818460208701611c60565b9190910192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161240b81601d850160208701611c60565b91909101601d0192915050565b6000835161242a818460208801611c60565b7468747470733a2f2f697066732e696f2f697066732f60581b908301908152612456601582018561200f565b600b60fa1b815260010195945050505050565b6000835161247b818460208801611c60565b7468747470733a2f2f697066732e696f2f697066732f60581b908301908152610fc0601582018561200f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082612508576125086121c7565b500690565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061254090830184611c8c565b9695505050505050565b60006020828403121561255c57600080fd5b8151611c5981611c2656fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220c95b8f769cf38de9844b56772f8cc32beee4e046ec4012871aa83d948f2c5a7d64736f6c634300080a0033a26469706673582212203800c824116954daa8d91720dd96a5ae5221f6dc327f58cd38b9f5879c85d97764736f6c634300080a003360806040526000805534801561001457600080fd5b50604051610f2c380380610f2c83398101604081905261003391610058565b600280546001600160a01b0319166001600160a01b0392909216919091179055610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b610e95806100976000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635a1f3c28146100465780638e9230121461008b5780639518a3e91461009e575b600080fd5b61006f6100543660046101a9565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100993660046101d8565b6100b1565b60025461006f906001600160a01b031681565b6002546000906001600160a01b031633146100cb57600080fd5b60025460405160009184916001600160a01b03909116906100eb9061019c565b6100f69291906102d6565b604051809103906000f080158015610112573d6000803e3d6000fd5b5060008054815260016020526040812080546001600160a01b0319166001600160a01b03841617905580549192508061014a83610316565b91905055507f51d6a8f0ed3bde47953d69e76dfc64bb830fccc50b9100ba64f29137d2d57f16600160005461017f9190610331565b8460405161018e929190610348565b60405180910390a192915050565b610af68061036a83390190565b6000602082840312156101bb57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101ea57600080fd5b813567ffffffffffffffff8082111561020257600080fd5b818401915084601f83011261021657600080fd5b813581811115610228576102286101c2565b604051601f8201601f19908116603f01168101908382118183101715610250576102506101c2565b8160405282815287602084870101111561026957600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815180845260005b818110156102af57602081850181015186830182015201610293565b818111156102c1576000602083870101525b50601f01601f19169290920160200192915050565b6040815260006102e96040830185610289565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561032a5761032a610300565b5060010190565b60008282101561034357610343610300565b500390565b8281526040602082015260006103616040830184610289565b94935050505056fe60806040523480156200001157600080fd5b5060405162000af638038062000af683398101604081905262000034916200014a565b81516200004990600290602085019062000071565b50600180546001600160a01b0319166001600160a01b03929092169190911790555062000278565b8280546200007f906200023b565b90600052602060002090601f016020900481019282620000a35760008555620000ee565b82601f10620000be57805160ff1916838001178555620000ee565b82800160010185558215620000ee579182015b82811115620000ee578251825591602001919060010190620000d1565b50620000fc92915062000100565b5090565b5b80821115620000fc576000815560010162000101565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200014557600080fd5b919050565b600080604083850312156200015e57600080fd5b82516001600160401b03808211156200017657600080fd5b818501915085601f8301126200018b57600080fd5b815181811115620001a057620001a062000117565b604051601f8201601f19908116603f01168101908382118183101715620001cb57620001cb62000117565b81604052828152602093508884848701011115620001e857600080fd5b600091505b828210156200020c5784820184015181830185015290830190620001ed565b828211156200021e5760008484830101525b9550620002309150508582016200012d565b925050509250929050565b600181811c908216806200025057607f821691505b602082108114156200027257634e487b7160e01b600052602260045260246000fd5b50919050565b61086e80620002886000396000f3fe60806040526004361061007b5760003560e01c80634e6630b01161004e5780634e6630b014610100578063523fba7f146101245780639518a3e914610151578063f6326fb31461018957600080fd5b806306fdde0314610080578063338b5dea146100ab5780633ccdbb28146100cd5780634782f779146100ed575b600080fd5b34801561008c57600080fd5b50610095610191565b6040516100a2919061067e565b60405180910390f35b3480156100b757600080fd5b506100cb6100c63660046106eb565b61021f565b005b3480156100d957600080fd5b506100cb6100e8366004610717565b610344565b6100cb6100fb3660046106eb565b61051a565b34801561010c57600080fd5b5061011660005481565b6040519081526020016100a2565b34801561013057600080fd5b5061011661013f366004610759565b60036020526000908152604090205481565b34801561015d57600080fd5b50600154610171906001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b6100cb610619565b6002805461019e9061077d565b80601f01602080910402602001604051908101604052809291908181526020018280546101ca9061077d565b80156102175780601f106101ec57610100808354040283529160200191610217565b820191906000526020600020905b8154815290600101906020018083116101fa57829003601f168201915b505050505081565b6001546001600160a01b0316331461023657600080fd5b6000811161028b5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc91906107b8565b50604080516001600160a01b0384168152602081018390527fbc7c8a4d8049a3f99a02f2a20640c206a2e4d3f2fa54fd20da9f01fda3620cda91015b60405180910390a15050565b6001546001600160a01b0316331461035b57600080fd5b600082116103ab5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610282565b6040516370a0823160e01b815233600482015282906001600160a01b038516906370a0823190602401602060405180830381865afa1580156103f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041591906107da565b10156104575760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610282565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af11580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca91906107b8565b50604080516001600160a01b0385811682526020820185905283168183015290517fa0524ee0fd8662d6c046d199da2a6d3dc49445182cec055873a5bb9c2843c8e09181900360600190a1505050565b6001546001600160a01b0316331461053157600080fd5b6000548111156105745760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced0408aa8960931b6044820152606401610282565b806000808282546105859190610809565b90915550506040516001600160a01b038316908290600081818185875af1925050503d80600081146105d3576040519150601f19603f3d011682016040523d82523d6000602084013e6105d8565b606091505b5050604080518381526001600160a01b03851660208201527f6148672a948a12b8e0bf92a9338349b9ac890fad62a234abaf0a4da99f62cfcc925001610338565b6001546001600160a01b0316331461063057600080fd5b346000808282546106419190610820565b909155505060405134808252907fadb6a3fe015de6cf14b532348b91a6202eb862af051124a853b5935e034cfd7b9060200160405180910390a150565b600060208083528351808285015260005b818110156106ab5785810183015185820160400152820161068f565b818111156106bd576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146106e857600080fd5b50565b600080604083850312156106fe57600080fd5b8235610709816106d3565b946020939093013593505050565b60008060006060848603121561072c57600080fd5b8335610737816106d3565b925060208401359150604084013561074e816106d3565b809150509250925092565b60006020828403121561076b57600080fd5b8135610776816106d3565b9392505050565b600181811c9082168061079157607f821691505b602082108114156107b257634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156107ca57600080fd5b8151801515811461077657600080fd5b6000602082840312156107ec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561081b5761081b6107f3565b500390565b60008219821115610833576108336107f3565b50019056fea26469706673582212205683cb840f531aea90b7af568559590cd21fc5a6e3c89ac85cf01a89e5aa392664736f6c634300080a0033a264697066735822122068977f3d5a5521d132d12660a90da0cd94c7d5a9ff8f29656158f7ee634b250d64736f6c634300080a00336102206040526090610160818152608091829190620027926101803981526020016040518060a0016040528060668152602001620028226066913981526020016040518060a0016040528060698152602001620027296069913981526020016040518060a0016040528060698152602001620027296069913981526020016040518060a0016040528060698152602001620027296069913981526020016040518060a0016040528060698152602001620027296069913981526020016040518060400160405280600a81526020016911179f101e17b9bb339f60b11b8152508152506008906007620000f392919062000180565b503480156200010157600080fd5b5060405162002888380380620028888339810160408190526200012491620003b6565b8251839083906200013d906000906020850190620001e4565b50805162000153906001906020840190620001e4565b5050600780546001600160a01b0319166001600160a01b0393909316929092179091555062000480915050565b828054828255906000526020600020908101928215620001d2579160200282015b82811115620001d25782518051620001c1918491602090910190620001e4565b5091602001919060010190620001a1565b50620001e09291506200026f565b5090565b828054620001f29062000443565b90600052602060002090601f01602090048101928262000216576000855562000261565b82601f106200023157805160ff191683800117855562000261565b8280016001018555821562000261579182015b828111156200026157825182559160200191906001019062000244565b50620001e092915062000290565b80821115620001e0576000620002868282620002a7565b506001016200026f565b5b80821115620001e0576000815560010162000291565b508054620002b59062000443565b6000825580601f10620002c6575050565b601f016020900490600052602060002090810190620002e6919062000290565b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200031157600080fd5b81516001600160401b03808211156200032e576200032e620002e9565b604051601f8301601f19908116603f01168101908282118183101715620003595762000359620002e9565b816040528381526020925086838588010111156200037657600080fd5b600091505b838210156200039a57858201830151818301840152908201906200037b565b83821115620003ac5760008385830101525b9695505050505050565b600080600060608486031215620003cc57600080fd5b83516001600160401b0380821115620003e457600080fd5b620003f287838801620002ff565b945060208601519150808211156200040957600080fd5b506200041886828701620002ff565b604086015190935090506001600160a01b03811681146200043857600080fd5b809150509250925092565b600181811c908216806200045857607f821691505b602082108114156200047a57634e487b7160e01b600052602260045260246000fd5b50919050565b61229980620004906000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636352211e116100a257806395d89b411161007157806395d89b411461022d578063a22cb46514610235578063b88d4fde14610248578063c87b56dd1461025b578063e985e9c51461026e57600080fd5b80636352211e146101e15780636a627842146101f457806370a08231146102075780639518a3e91461021a57600080fd5b806311ce0267116100de57806311ce02671461018d57806318160ddd146101a057806323b872dd146101bb57806342842e0e146101ce57600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e3660046117f9565b6102aa565b60405190151581526020015b60405180910390f35b6101406102fc565b60405161012f9190611875565b61016061015b366004611888565b61038e565b6040516001600160a01b03909116815260200161012f565b61018b6101863660046118bd565b6103b5565b005b600654610160906001600160a01b031681565b6009546001600160801b03165b60405190815260200161012f565b61018b6101c93660046118e7565b6104d0565b61018b6101dc3660046118e7565b610501565b6101606101ef366004611888565b61051c565b61018b610202366004611923565b61057c565b6101ad610215366004611923565b6105eb565b600754610160906001600160a01b031681565b610140610671565b61018b61024336600461193e565b610680565b61018b6102563660046119e9565b61068f565b610140610269366004611888565b6106c7565b61012361027c366004611a94565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102db57506001600160e01b03198216635b5e139f60e01b145b806102f657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461030b90611ac7565b80601f016020809104026020016040519081016040528092919081815260200182805461033790611ac7565b80156103845780601f1061035957610100808354040283529160200191610384565b820191906000526020600020905b81548152906001019060200180831161036757829003601f168201915b5050505050905090565b600061039982610abc565b506000908152600460205260409020546001600160a01b031690565b60006103c08261051c565b9050806001600160a01b0316836001600160a01b031614156104335760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061044f575061044f813361027c565b6104c15760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161042a565b6104cb8383610b1e565b505050565b6104da3382610b8c565b6104f65760405162461bcd60e51b815260040161042a90611b02565b6104cb838383610c0b565b6104cb8383836040518060200160405280600081525061068f565b6000818152600260205260408120546001600160a01b0316806102f65760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161042a565b6007546001600160a01b0316331461059357600080fd5b6009546105aa9082906001600160801b0316610db2565b600980546001600160801b03169060006105c383611b66565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b60006001600160a01b0382166106555760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161042a565b506001600160a01b031660009081526003602052604090205490565b60606001805461030b90611ac7565b61068b338383610dcc565b5050565b6106993383610b8c565b6106b55760405162461bcd60e51b815260040161042a90611b02565b6106c184848484610e9b565b50505050565b6000818152600260205260409020546060906001600160a01b03166107275760405162461bcd60e51b8152602060048201526016602482015275151bdad95b925108191bd95cc81b9bdd08195e1a5cdd60521b604482015260640161042a565b6040805160a0810191829052600754632d506fe160e01b909252600160a482015260c4810184905260009181906001600160a01b0316632d506fe160e48301602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190611b8d565b8152600754604051632d506fe160e01b815260026004820152602481018790526020909201916001600160a01b0390911690632d506fe190604401602060405180830381865afa1580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108239190611b8d565b8152600754604051632d506fe160e01b815260036004820152602481018790526020909201916001600160a01b0390911690632d506fe190604401602060405180830381865afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f9190611b8d565b8152600754604051632d506fe160e01b8152600480820152602481018790526020909201916001600160a01b0390911690632d506fe190604401602060405180830381865afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190611b8d565b8152600754604051632d506fe160e01b815260056004820152602481018790526020909201916001600160a01b0390911690632d506fe190604401602060405180830381865afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190611b8d565b9052905060006109a46102fc565b6109ad85610ece565b6040516020016109be929190611bc2565b6040516020818303038152906040529050806040516020016109e09190611c25565b6040516020818303038152906040529050806109ff8360800151610ece565b610a0c8460600151610ece565b610a198560400151610ece565b610a268660200151610ece565b8651610a3190610ece565b604051602001610a4696959493929190611c8c565b6040516020818303038152906040529050610a9181610a6c610a6785610fcc565b611396565b604051602001610a7d929190611e5c565b604051602081830303815290604052611396565b905080604051602001610aa49190611ed6565b60405160208183030381529060405292505050919050565b6000818152600260205260409020546001600160a01b0316610b1b5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161042a565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610b538261051c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610b988361051c565b9050806001600160a01b0316846001600160a01b03161480610bdf57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610c035750836001600160a01b0316610bf88461038e565b6001600160a01b0316145b949350505050565b826001600160a01b0316610c1e8261051c565b6001600160a01b031614610c825760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161042a565b6001600160a01b038216610ce45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161042a565b610cef8383836114fe565b610cfa600082610b1e565b6001600160a01b0383166000908152600360205260408120805460019290610d23908490611f1b565b90915550506001600160a01b0382166000908152600360205260408120805460019290610d51908490611f32565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61068b828260405180602001604052806000815250611564565b816001600160a01b0316836001600160a01b03161415610e2e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161042a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610ea6848484610c0b565b610eb284848484611597565b6106c15760405162461bcd60e51b815260040161042a90611f4a565b606081610ef25750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f1c5780610f0681611f9c565b9150610f159050600a83611fcd565b9150610ef6565b60008167ffffffffffffffff811115610f3757610f3761197a565b6040519080825280601f01601f191660200182016040528015610f61576020820181803683370190505b5090505b8415610c0357610f76600183611f1b565b9150610f83600a86611fe1565b610f8e906030611f32565b60f81b818381518110610fa357610fa3611ff5565b60200101906001600160f81b031916908160001a905350610fc5600a86611fcd565b9450610f65565b80516020820151604080840151606080860151608087015160065494516313b95bbb60e11b81526004810188905292969594919290916000916001600160a01b0390911690632772b77690602401600060405180830381865afa158015611037573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261105f919081019061200b565b60065460405163f319028160e01b8152600481018890529192506000916001600160a01b039091169063f319028190602401600060405180830381865afa1580156110ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110d6919081019061200b565b600654604051637e55647160e01b8152600481018890529192506000916001600160a01b0390911690637e55647190602401600060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114d919081019061200b565b60065460405163640ae2ed60e01b8152600481018890529192506000916001600160a01b039091169063640ae2ed90602401600060405180830381865afa15801561119c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c4919081019061200b565b6006546040516305ad682d60e31b8152600481018890529192506000916001600160a01b0390911690632d6b416890602401600060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261123b919081019061200b565b90506000600860008154811061125357611253611ff5565b90600052602060002001600860018154811061127157611271611ff5565b9060005260206000200187600860028154811061129057611290611ff5565b906000526020600020016040516020016112ad949392919061211c565b6040516020818303038152906040529050808560086003815481106112d4576112d4611ff5565b906000526020600020018660086004815481106112f3576112f3611ff5565b90600052602060002001604051602001611311959493929190612159565b60405160208183030381529060405290508083600860058154811061133857611338611ff5565b9060005260206000200184600860068154811061135757611357611ff5565b90600052602060002001604051602001611375959493929190612159565b60408051601f198184030181529190529d9c50505050505050505050505050565b60608151600014156113b657505060408051602081019091526000815290565b600060405180606001604052806040815260200161222460409139905060006003845160026113e59190611f32565b6113ef9190611fcd565b6113fa9060046121aa565b90506000611409826020611f32565b67ffffffffffffffff8111156114215761142161197a565b6040519080825280601f01601f19166020018201604052801561144b576020820181803683370190505b509050818152600183018586518101602084015b818310156114b95760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161145f565b6003895106600181146114d357600281146114e4576114f0565b613d3d60f01b6001198301526114f0565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b038316156104cb5760405162461bcd60e51b815260206004820152602660248201527f4552433732313a207472616e736665722066726f6d206e6f6e2d7a65726f206160448201526564647265737360d01b606482015260840161042a565b61156e8383611695565b61157b6000848484611597565b6104cb5760405162461bcd60e51b815260040161042a90611f4a565b60006001600160a01b0384163b1561168a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906115db9033908990889088906004016121c9565b6020604051808303816000875af1925050508015611616575060408051601f3d908101601f1916820190925261161391810190612206565b60015b611670573d808015611644576040519150601f19603f3d011682016040523d82523d6000602084013e611649565b606091505b5080516116685760405162461bcd60e51b815260040161042a90611f4a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c03565b506001949350505050565b6001600160a01b0382166116eb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161042a565b6000818152600260205260409020546001600160a01b0316156117505760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161042a565b61175c600083836114fe565b6001600160a01b0382166000908152600360205260408120805460019290611785908490611f32565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114610b1b57600080fd5b60006020828403121561180b57600080fd5b8135611816816117e3565b9392505050565b60005b83811015611838578181015183820152602001611820565b838111156106c15750506000910152565b6000815180845261186181602086016020860161181d565b601f01601f19169290920160200192915050565b6020815260006118166020830184611849565b60006020828403121561189a57600080fd5b5035919050565b80356001600160a01b03811681146118b857600080fd5b919050565b600080604083850312156118d057600080fd5b6118d9836118a1565b946020939093013593505050565b6000806000606084860312156118fc57600080fd5b611905846118a1565b9250611913602085016118a1565b9150604084013590509250925092565b60006020828403121561193557600080fd5b611816826118a1565b6000806040838503121561195157600080fd5b61195a836118a1565b91506020830135801515811461196f57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119b9576119b961197a565b604052919050565b600067ffffffffffffffff8211156119db576119db61197a565b50601f01601f191660200190565b600080600080608085870312156119ff57600080fd5b611a08856118a1565b9350611a16602086016118a1565b925060408501359150606085013567ffffffffffffffff811115611a3957600080fd5b8501601f81018713611a4a57600080fd5b8035611a5d611a58826119c1565b611990565b818152886020838501011115611a7257600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611aa757600080fd5b611ab0836118a1565b9150611abe602084016118a1565b90509250929050565b600181811c90821680611adb57607f821691505b60208210811415611afc57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b0380831681811415611b8357611b83611b50565b6001019392505050565b600060208284031215611b9f57600080fd5b5051919050565b60008151611bb881856020860161181d565b9290920192915050565b693d913730b6b2911d101160b11b81528251600090611be881600a85016020880161181d565b61011960f51b600a918401918201528351611c0a81600c84016020880161181d565b61088b60f21b600c9290910191820152600e01949350505050565b60008251611c3781846020870161181d565b7f226465736372697074696f6e223a2022546869732069732061204e4654206f669201918252507f2074686520666972737420696e697469616c206f66206d79206e616d6521222c6020820152604001919050565b60008751611c9e818460208c0161181d565b80830190507f2261747472696275746573223a205b7b2274726169745f74797065223a20224881526e30ba111610113b30b63ab2911d101160891b60208201528751611cf181602f840160208c0161181d565b62089f4b60ea1b602f929091019182018190527f7b2274726169745f74797065223a20225370656373222c202276616c7565223a603283015261101160f11b60528301528751611d48816054850160208c0161181d565b6054920191820152611e4f611e3f611e39611e05611df7611df1611dbb611dac611da660578a017f7b2274726169745f74797065223a20224e65636b6c616365222c202276616c7581526432911d101160d91b602082015260250190565b8e611ba6565b62089f4b60ea1b815260030190565b7f7b2274726169745f74797065223a2022436c6f74686573222c202276616c7565815263111d101160e11b602082015260240190565b8a611ba6565b61227d60f01b815260020190565b7f7b2274726169745f74797065223a202253686f6573222c202276616c7565223a815261101160f11b602082015260220190565b86611ba6565b63089f574b60e21b815260040190565b9998505050505050505050565b60008351611e6e81846020880161181d565b80830190507f22696d6167655f64617461223a2022646174613a696d6167652f7376672b786d8152681b0ed8985cd94d8d0b60ba1b60208201528351611ebb81602984016020880161181d565b61227d60f01b60299290910191820152602b01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f0e81601d85016020870161181d565b91909101601d0192915050565b600082821015611f2d57611f2d611b50565b500390565b60008219821115611f4557611f45611b50565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600019821415611fb057611fb0611b50565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611fdc57611fdc611fb7565b500490565b600082611ff057611ff0611fb7565b500690565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561201d57600080fd5b815167ffffffffffffffff81111561203457600080fd5b8201601f8101841361204557600080fd5b8051612053611a58826119c1565b81815285602083850101111561206857600080fd5b61207982602083016020860161181d565b95945050505050565b8054600090600181811c908083168061209c57607f831692505b60208084108214156120be57634e487b7160e01b600052602260045260246000fd5b8180156120d257600181146120e357612110565b60ff19861689528489019650612110565b60008881526020902060005b868110156121085781548b8201529085019083016120ef565b505084890196505b50505050505092915050565b600061213161212b8388612082565b86612082565b845161214181836020890161181d565b61214d81830186612082565b98975050505050505050565b6000865161216b818460208b0161181d565b86519083019061217f818360208b0161181d565b61218b81830188612082565b915050845161219e81836020890161181d565b611e4f81830186612082565b60008160001904831182151516156121c4576121c4611b50565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906121fc90830184611849565b9695505050505050565b60006020828403121561221857600080fd5b8151611816816117e356fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220689c65cbd5516b26906fbed9b769ac96e676eba33fe415948d4e957f5015c03e64736f6c634300080a0033222f3e203c696d6167652077696474683d22333222206865696768743d2233322220696d6167652d72656e646572696e673d22706978656c6174656422207072657365727665417370656374526174696f3d22784d6964594d69642220786c696e6b3a687265663d223c7376672077696474683d223130302522206865696768743d2231303025222076657273696f6e3d22312e31222076696577426f783d223020302033322033322220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e223c696d6167652077696474683d22333222206865696768743d2233322220696d6167652d72656e646572696e673d22706978656c6174656422207072657365727665417370656374526174696f3d22784d6964594d69642220786c696e6b3a687265663d22",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636ebc8c86116100715780636ebc8c8614610157578063c5594ef314610180578063c5cc085814610193578063cfb83a8d146101bc578063f5c8d232146101cf578063f80efd28146101f057600080fd5b806318cd2989146100ae5780632d506fe1146100de5780633fbdf32c146100ff57806347dc3621146101145780636b1b2e0f14610144575b600080fd5b6000546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec3660046108e7565b6101f9565b6040519081526020016100d5565b61011261010d366004610909565b6102dc565b005b61011261012236600461093a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546100c1906001600160a01b031681565b6100c1610165366004610909565b6000908152600360205260409020546001600160a01b031690565b6002546100c1906001600160a01b031681565b6100c16101a1366004610909565b6004602052600090815260409020546001600160a01b031681565b6101126101ca3660046109fa565b610504565b6101e26101dd366004610909565b61079f565b6040516100d5929190610acf565b6100f160055481565b60008054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102679190610afb565b6001600160a01b031663d2e59bfe836040518263ffffffff1660e01b815260040161029491815260200190565b602060405180830381865afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190610b18565b9392505050565b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610afb565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b39190610b18565b156103fa5760405162461bcd60e51b8152602060048201526013602482015272155cd95c88185b1c9958591e481b5a5b9d1959606a1b604482015260640160405180910390fd5b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190610afb565b6040516335313c2160e11b81523360048201526001600160a01b039190911690636a627842906024016020604051808303816000875af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190610b18565b50604051819033907fc6fe9b78def1629047bd69918cbc1ef87aeefe1543a67e54cb8fcd50711ec6ce90600090a350565b6000805460405163176b9b7560e01b81526001600160a01b039091169063176b9b75906105379087908790600401610b31565b6020604051808303816000875af1158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190610afb565b600154604051634749180960e11b81529192506000916001600160a01b0390911690638e923012906105b0908890600401610b5f565b6020604051808303816000875af11580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f39190610afb565b6002546040516370a0823160e01b81523360048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190610b18565b6106c2576002546040516335313c2160e11b81523360048201526001600160a01b0390911690636a62784290602401600060405180830381600087803b1580156106a957600080fd5b505af11580156106bd573d6000803e3d6000fd5b505050505b6040805180820182526001600160a01b038481168252602080830187815260055460009081526003835294909420835181546001600160a01b0319169316929092178255925180519293919261071e926001850192019061084e565b505060058054600090815260046020526040812080546001600160a01b0319166001600160a01b0386161790558154925061075883610b72565b91905055507f6d8073b3c5d7e3a29e9539222aa4da4b3728f3e94edcef7840a1fc244e51deaf85858460405161079093929190610b9b565b60405180910390a15050505050565b600360205260009081526040902080546001820180546001600160a01b0390921692916107cb90610bd9565b80601f01602080910402602001604051908101604052809291908181526020018280546107f790610bd9565b80156108445780601f1061081957610100808354040283529160200191610844565b820191906000526020600020905b81548152906001019060200180831161082757829003601f168201915b5050505050905082565b82805461085a90610bd9565b90600052602060002090601f01602090048101928261087c57600085556108c2565b82601f1061089557805160ff19168380011785556108c2565b828001600101855582156108c2579182015b828111156108c25782518255916020019190600101906108a7565b506108ce9291506108d2565b5090565b5b808211156108ce57600081556001016108d3565b600080604083850312156108fa57600080fd5b50508035926020909101359150565b60006020828403121561091b57600080fd5b5035919050565b6001600160a01b038116811461093757600080fd5b50565b60006020828403121561094c57600080fd5b81356102d581610922565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261097e57600080fd5b813567ffffffffffffffff8082111561099957610999610957565b604051601f8301601f19908116603f011681019082821181831017156109c1576109c1610957565b816040528381528660208588010111156109da57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610a0f57600080fd5b833567ffffffffffffffff80821115610a2757600080fd5b610a338783880161096d565b94506020860135915080821115610a4957600080fd5b610a558783880161096d565b93506040860135915080821115610a6b57600080fd5b50610a788682870161096d565b9150509250925092565b6000815180845260005b81811015610aa857602081850181015186830182015201610a8c565b81811115610aba576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610af390830184610a82565b949350505050565b600060208284031215610b0d57600080fd5b81516102d581610922565b600060208284031215610b2a57600080fd5b5051919050565b604081526000610b446040830185610a82565b8281036020840152610b568185610a82565b95945050505050565b6020815260006102d56020830184610a82565b6000600019821415610b9457634e487b7160e01b600052601160045260246000fd5b5060010190565b606081526000610bae6060830186610a82565b8281036020840152610bc08186610a82565b91505060018060a01b0383166040830152949350505050565b600181811c90821680610bed57607f821691505b60208210811415610c0e57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a828af0bbdb7c143fb0f4f48631852327d795259421eb3e53f81cb27a6a1db2364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createDAO(string,string,string)": {
        "details": "Include a offchain signer to verify if the structure of the datafile is correct",
        "params": {
          "description": "Description of the DAO",
          "name": "The name of the DAO.",
          "symbol": "The symbol of the DAO."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDAO(string,string,string)": {
        "notice": "Create a new DAO."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2765,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "GIV3_NFT_FACTORY",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Giv3NFTFactory)3901"
      },
      {
        "astId": 2768,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "GIV3_TREASURY_FACTORY",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Giv3TreasuryFactory)4201"
      },
      {
        "astId": 2771,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "GIV3_AVATAR_NFT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Giv3AvatarNFT)2753"
      },
      {
        "astId": 2781,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "daoIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(DAO)2776_storage)"
      },
      {
        "astId": 2785,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "treasuryIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2787,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "daoCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Giv3AvatarNFT)2753": {
        "encoding": "inplace",
        "label": "contract Giv3AvatarNFT",
        "numberOfBytes": "20"
      },
      "t_contract(Giv3NFTFactory)3901": {
        "encoding": "inplace",
        "label": "contract Giv3NFTFactory",
        "numberOfBytes": "20"
      },
      "t_contract(Giv3TreasuryFactory)4201": {
        "encoding": "inplace",
        "label": "contract Giv3TreasuryFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DAO)2776_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Giv3Core.DAO)",
        "numberOfBytes": "32",
        "value": "t_struct(DAO)2776_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DAO)2776_storage": {
        "encoding": "inplace",
        "label": "struct Giv3Core.DAO",
        "members": [
          {
            "astId": 2773,
            "contract": "contracts/Giv3Core.sol:Giv3Core",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2775,
            "contract": "contracts/Giv3Core.sol:Giv3Core",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}