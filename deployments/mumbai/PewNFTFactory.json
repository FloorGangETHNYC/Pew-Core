{
  "address": "0xA47Ae2506199D8bdd436F59796e78f2e6e78320c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pewCore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PEW_CORE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_pewCore",
          "type": "address"
        }
      ],
      "name": "createCollection",
      "outputs": [
        {
          "internalType": "contract PewNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "internalType": "contract PewNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x15b84abcf45960f4a5bff00a3ffa32c94c60d9319e8221fde454cc94d36f9401",
  "receipt": {
    "to": null,
    "from": "0x2C1CC2df33B3EC74Cc4fD83B539789f79f5c797B",
    "contractAddress": "0xA47Ae2506199D8bdd436F59796e78f2e6e78320c",
    "transactionIndex": 7,
    "gasUsed": "2581285",
    "logsBloom": "0x
    "blockHash": "0x1d172f314f109ab4cc6ab6d58b15463345b69c3cd60fce065fedb6bd8900deeb",
    "transactionHash": "0x15b84abcf45960f4a5bff00a3ffa32c94c60d9319e8221fde454cc94d36f9401",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 26907360,
        "transactionHash": "0x15b84abcf45960f4a5bff00a3ffa32c94c60d9319e8221fde454cc94d36f9401",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002c1cc2df33b3ec74cc4fd83b539789f79f5c797b",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012b60bce8397380000000000000000000000000000000000000000000000008a3c19cf411313ab0000000000000000000000000000000000000000000003c657c82b7a34a444fd0000000000000000000000000000000000000000000000008a2963c3728f7c730000000000000000000000000000000000000000000003c657dae1860327dc35",
        "logIndex": 10,
        "blockHash": "0x1d172f314f109ab4cc6ab6d58b15463345b69c3cd60fce065fedb6bd8900deeb"
      }
    ],
    "blockNumber": 26907360,
    "cumulativeGasUsed": "2986695",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x37dA2743784594C729734E0290Bf19f6c6f251C5"
  ],
  "numDeployments": 3,
  "solcInputHash": "b438200b508f63920f92d36b500dd062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pewCore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PEW_CORE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pewCore\",\"type\":\"address\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"contract PewNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCollection\",\"outputs\":[{\"internalType\":\"contract PewNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PewNFTFactory.sol\":\"PewNFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf82090d06cc06c498ae5847e389e1fe8cef231e9cf19f81fee476cf581e4519d\",\"license\":\"MIT\"},\"contracts/PewNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\ncontract PewNFT is ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Store data about the contributions made by a user holding the token\\r\\n    struct Contribution {\\r\\n        string ipfsHash;\\r\\n        uint256 upvotes;\\r\\n        uint256 downvotes;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Contribution[]) contributions;\\r\\n    mapping(uint256 => uint256) mintedTime;\\r\\n\\r\\n    address public PEW_CORE;\\r\\n    string public baseURI;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    event ContributionAdded(\\r\\n        address indexed contributor,\\r\\n        uint256 indexed tokenId,\\r\\n        string ipfsHash\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _pewCore\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        PEW_CORE = address(_pewCore);\\r\\n    }\\r\\n\\r\\n    modifier onlyPew() {\\r\\n        require(msg.sender == address(PEW_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to) external onlyPew {\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        mintedTime[_currentIndex] = block.timestamp;\\r\\n        _currentIndex++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Contribution to the token.\\r\\n     */\\r\\n    function addContribution(string memory ipfsHash, uint256 tokenId)\\r\\n        external\\r\\n        onlyPew\\r\\n    {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        Contribution memory contribution = Contribution(ipfsHash, 0, 0);\\r\\n        contributions[tokenId].push(contribution);\\r\\n        emit ContributionAdded(msg.sender, tokenId, ipfsHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upvote a contribution.\\r\\n     */\\r\\n    function upvote(uint256 tokenId, uint256 contributionIndex)\\r\\n        external\\r\\n        onlyPew\\r\\n    {\\r\\n        Contribution storage contribution = contributions[tokenId][\\r\\n            contributionIndex\\r\\n        ];\\r\\n        contribution.upvotes++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Downvote a contribution.\\r\\n     */\\r\\n    function downvote(uint256 tokenId, uint256 contributionIndex)\\r\\n        external\\r\\n        onlyPew\\r\\n    {\\r\\n        Contribution storage contribution = contributions[tokenId][\\r\\n            contributionIndex\\r\\n        ];\\r\\n        contribution.downvotes++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     * @dev gets baseURI from contract state variable\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return buildMetadata(tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the metadata required in accordance ot Opensea requirements\\r\\n    /// @param _tokenId Policy ID which will also be the NFT token ID\\r\\n    /// @dev Can change public to internal\\r\\n    function buildMetadata(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 _governanceScore = getGovernanceScore(_tokenId);\\r\\n        string memory image;\\r\\n        // NFTS that level up based on the governance score of the token.\\r\\n        // Storj is used to host the images. Storj enables fast and secure cloud storage and it is built ontop of IPFS.\\r\\n        if (_governanceScore > 1) {\\r\\n            image = \\\"https://link.storjshare.io/jvxrj4svnfnz664lnpoawmwnzu2q/demo-bucket%2Ficon-rank-silver.png\\\";\\r\\n        } else if (_governanceScore > 2) {\\r\\n            image = \\\"https://link.storjshare.io/ju4dlex6o6lyfjqwxwrc76ua5czq/demo-bucket%2Ficon-rank-gold.png\\\";\\r\\n        } else if (_governanceScore > 3) {\\r\\n            image = \\\"https://link.storjshare.io/jxiaovikkuwcupfqkqueinnno6kq/demo-bucket%2Ficon-rank-platinum.png\\\";\\r\\n        } else if (_governanceScore > 4) {\\r\\n            image = \\\"https://link.storjshare.io/jurkcbz6kacwnjefr5bhrrucvfdq/demo-bucket%2Ficon-rank-diamond.png\\\";\\r\\n        } else {\\r\\n            image = \\\"https://link.storjshare.io/jubzv3gkgwez5f45x7rgiv7ns72a/demo-bucket%2Ficon-rank-bronze.png\\\";\\r\\n        }\\r\\n        bytes memory m1 = abi.encodePacked(\\r\\n            '{\\\"name\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"description\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            image,\\r\\n            // adding policyHolder\\r\\n            '\\\", \\\"attributes\\\": [{\\\"trait_type\\\":\\\"Governance Score\\\",',\\r\\n            '\\\"value\\\":\\\"',\\r\\n            Strings.toString(_governanceScore),\\r\\n            '\\\"}]'\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(bytes.concat(m1))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getUpvotes(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return contributions[tokenId][index].upvotes;\\r\\n    }\\r\\n\\r\\n    function getDownvotes(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return contributions[tokenId][index].downvotes;\\r\\n    }\\r\\n\\r\\n    function getTotalUpvotes(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _totalUpvotes)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            _totalUpvotes += contributions[tokenId][i].upvotes;\\r\\n        }\\r\\n        return _totalUpvotes;\\r\\n    }\\r\\n\\r\\n    function getTotalDownvotes(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _totalDownvotes)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            _totalDownvotes += contributions[tokenId][i].downvotes;\\r\\n        }\\r\\n        return _totalDownvotes;\\r\\n    }\\r\\n\\r\\n    function getContribution(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"https://ipfs.io/ipfs/\\\",\\r\\n                    contributions[tokenId][index].ipfsHash\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getAllContributions(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory contributionsString = \\\"\\\";\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            if (i + 1 < contributions[tokenId].length) {\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        contributionsString,\\r\\n                        \\\"https://ipfs.io/ipfs/\\\",\\r\\n                        contributions[tokenId][i].ipfsHash,\\r\\n                        \\\",\\\"\\r\\n                    )\\r\\n                );\\r\\n            } else {\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        contributionsString,\\r\\n                        \\\"https://ipfs.io/ipfs/\\\",\\r\\n                        contributions[tokenId][i].ipfsHash\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return contributionsString;\\r\\n    }\\r\\n\\r\\n    function getContributionCount(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _contributionCount)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return contributions[tokenId].length;\\r\\n    }\\r\\n\\r\\n    function getTimeScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return (block.timestamp - mintedTime[tokenId]) / 1 days;\\r\\n    }\\r\\n\\r\\n    function getGovernanceScore(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _governanceScore)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        uint256 _totalUpvotes = getTotalUpvotes(tokenId);\\r\\n        uint256 _totalDownvotes = getTotalDownvotes(tokenId);\\r\\n        uint256 _timeScore = getTimeScore(tokenId);\\r\\n\\r\\n        if (_totalDownvotes > _totalUpvotes) {\\r\\n            _governanceScore = 0;\\r\\n        } else {\\r\\n            _governanceScore = _totalUpvotes - _totalDownvotes + _timeScore;\\r\\n        }\\r\\n\\r\\n        return _governanceScore;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xea26b65f7bbb91071c7104c81e163781e65534c4d3facdb6f82205a719255150\",\"license\":\"MIT\"},\"contracts/PewNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./PewNFT.sol\\\";\\r\\n\\r\\ncontract PewNFTFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => PewNFT) collections;\\r\\n\\r\\n    address public PEW_CORE;\\r\\n\\r\\n    event CollectionCreated(uint256 id, address collection);\\r\\n\\r\\n    modifier onlyPew() {\\r\\n        require(msg.sender == address(PEW_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _pewCore) {\\r\\n        PEW_CORE = address(_pewCore);\\r\\n    }\\r\\n\\r\\n    function createCollection(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address _pewCore\\r\\n    ) public onlyPew returns (PewNFT) {\\r\\n        PewNFT pewAddress = new PewNFT(name, symbol, _pewCore);\\r\\n\\r\\n        collections[collectionsCounter] = pewAddress;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        return pewAddress;\\r\\n        // emit CollectionCreated()\\r\\n    }\\r\\n\\r\\n    function getCollection(uint256 id) public view returns (PewNFT) {\\r\\n        return collections[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd646c0a4ec2ca102c6db305ad5ad4743a29345c53b5b310668cdf837646c837d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632722348e146100465780635a1f3c2814610075578063d0ae65db1461009e575b600080fd5b600254610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610263565b6000908152600160205260409020546001600160a01b031690565b6100596100ac3660046101df565b6002546000906001600160a01b031633146100c657600080fd5b60008484846040516100d790610145565b6100e3939291906102c9565b604051809103906000f0801580156100ff573d6000803e3d6000fd5b5060008054815260016020526040812080546001600160a01b0319166001600160a01b03841617905580549192508061013783610307565b909155509095945050505050565b6129c78061034783390190565b600082601f83011261016357600080fd5b813567ffffffffffffffff8082111561017e5761017e610330565b604051601f8301601f19908116603f011681019082821181831017156101a6576101a6610330565b816040528381528660208588010111156101bf57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156101f457600080fd5b833567ffffffffffffffff8082111561020c57600080fd5b61021887838801610152565b9450602086013591508082111561022e57600080fd5b5061023b86828701610152565b92505060408401356001600160a01b038116811461025857600080fd5b809150509250925092565b60006020828403121561027557600080fd5b5035919050565b6000815180845260005b818110156102a257602081850181015186830182015201610286565b818111156102b4576000602083870101525b50601f01601f19169290920160200192915050565b6060815260006102dc606083018661027c565b82810360208401526102ee818661027c565b91505060018060a01b0383166040830152949350505050565b600060001982141561032957634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620029c7380380620029c78339810160408190526200003491620001ed565b8251839083906200004d90600090602085019062000090565b5080516200006390600190602084019062000090565b5050600880546001600160a01b0319166001600160a01b03939093169290921790915550620002cd915050565b8280546200009e906200027a565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b600082601f8301126200014857600080fd5b81516001600160401b0380821115620001655762000165620002b7565b604051601f8301601f19908116603f01168101908282118183101715620001905762000190620002b7565b81604052838152602092508683858801011115620001ad57600080fd5b600091505b83821015620001d15785820183015181830184015290820190620001b2565b83821115620001e35760008385830101525b9695505050505050565b6000806000606084860312156200020357600080fd5b83516001600160401b03808211156200021b57600080fd5b620002298783880162000136565b945060208601519150808211156200024057600080fd5b506200024f8682870162000136565b604086015190935090506001600160a01b03811681146200026f57600080fd5b809150509250925092565b600181811c908216806200028f57607f821691505b60208210811415620002b157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6126ea80620002dd6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636a62784211610104578063b2dfa007116100a2578063cf08a1aa11610071578063cf08a1aa146103f0578063e985e9c514610403578063edf877041461043f578063ff37868b1461045257600080fd5b8063b2dfa007146103a4578063b88d4fde146103b7578063c87b56dd146103ca578063cec1da9e146103dd57600080fd5b80637963b193116100de5780637963b1931461036357806395d89b4114610376578063a22cb4651461037e578063a26b967f1461039157600080fd5b80636a627842146103355780636c0360eb1461034857806370a082311461035057600080fd5b80632722348e1161017c578063495ff7b71161014b578063495ff7b7146102e95780635e7ce9f8146102fc5780635f83b8ea1461030f5780636352211e1461032257600080fd5b80632722348e1461029d5780633ef42951146102b0578063402533c1146102c357806342842e0e146102d657600080fd5b8063081812fc116101b8578063081812fc14610231578063095ea7b31461025c57806318160ddd1461026f57806323b872dd1461028a57600080fd5b806301ffc9a7146101df57806306a7fefe1461020757806306fdde031461021c575b600080fd5b6101f26101ed366004611df1565b610465565b60405190151581526020015b60405180910390f35b61021a610215366004611e9d565b6104b7565b005b61022461051d565b6040516101fe9190612222565b61024461023f366004611e84565b6105af565b6040516001600160a01b0390911681526020016101fe565b61021a61026a366004611dc7565b61063c565b600a546001600160801b03165b6040519081526020016101fe565b61021a610298366004611cd3565b610752565b600854610244906001600160a01b031681565b61027c6102be366004611e84565b610783565b6102246102d1366004611e9d565b610802565b61021a6102e4366004611cd3565b610881565b61027c6102f7366004611e9d565b61089c565b61021a61030a366004611e9d565b6108fd565b61021a61031d366004611e2b565b610959565b610244610330366004611e84565b610a99565b61021a610343366004611c7e565b610b10565b610224610b96565b61027c61035e366004611c7e565b610c24565b61027c610371366004611e9d565b610cab565b610224610d0c565b61021a61038c366004611d8b565b610d1b565b61027c61039f366004611e84565b610d2a565b61027c6103b2366004611e84565b610d64565b61021a6103c5366004611d0f565b610dfb565b6102246103d8366004611e84565b610e33565b61027c6103eb366004611e84565b610e63565b61027c6103fe366004611e84565b610eb2565b6101f2610411366004611ca0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61022461044d366004611e84565b610f43565b610224610460366004611e84565b6110a5565b60006001600160e01b031982166380ac58cd60e01b148061049657506001600160e01b03198216635b5e139f60e01b145b806104b157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6008546001600160a01b031633146104ce57600080fd5b60008281526006602052604081208054839081106104ee576104ee61246c565b9060005260206000209060030201905080600201600081548092919061051390612411565b9190505550505050565b60606000805461052c906123b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610558906123b5565b80156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b5050505050905090565b60006105ba826111d8565b6106205760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061064782610a99565b9050806001600160a01b0316836001600160a01b031614156106b55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610617565b336001600160a01b03821614806106d157506106d18133610411565b6107435760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610617565b61074d83836111f5565b505050565b61075c3382611263565b6107785760405162461bcd60e51b8152600401610617906122d6565b61074d83838361134d565b600061078e826111d8565b6107aa5760405162461bcd60e51b815260040161061790612287565b60006107b583610d64565b905060006107c284610eb2565b905060006107cf85610e63565b9050828211156107e257600093506107fa565b806107ed8385612372565b6107f79190612327565b93505b505050919050565b606061080d836111d8565b6108295760405162461bcd60e51b815260040161061790612287565b60008381526006602052604090208054839081106108495761084961246c565b906000526020600020906003020160000160405160200161086a9190612176565b604051602081830303815290604052905092915050565b61074d83838360405180602001604052806000815250610dfb565b60006108a7836111d8565b6108c35760405162461bcd60e51b815260040161061790612287565b60008381526006602052604090208054839081106108e3576108e361246c565b906000526020600020906003020160020154905092915050565b6008546001600160a01b0316331461091457600080fd5b60008281526006602052604081208054839081106109345761093461246c565b9060005260206000209060030201905080600101600081548092919061051390612411565b6008546001600160a01b0316331461097057600080fd5b61097981610a99565b6001600160a01b0316326001600160a01b0316146109e75760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920746865206f776e65722063616e20616464206120636f6e747269626044820152643aba34b7b760d91b6064820152608401610617565b6040805160608101825283815260006020808301829052828401829052848252600681529281208054600181018255908252908390208251805193948594600390940290920192610a3b9284920190611b53565b506020820151816001015560408201518160020155505081336001600160a01b03167fcdcb8905b775881d4cd990c8d7c1132b7e338e3e42af9cd789f528cd4e44a2c585604051610a8c9190612222565b60405180910390a3505050565b6000818152600260205260408120546001600160a01b0316806104b15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610617565b6008546001600160a01b03163314610b2757600080fd5b600a54610b3e9082906001600160801b03166114f4565b600a80546001600160801b03908116600090815260076020526040812042905582549091169190610b6e836123ea565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b60098054610ba3906123b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcf906123b5565b8015610c1c5780601f10610bf157610100808354040283529160200191610c1c565b820191906000526020600020905b815481529060010190602001808311610bff57829003601f168201915b505050505081565b60006001600160a01b038216610c8f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610617565b506001600160a01b031660009081526003602052604090205490565b6000610cb6836111d8565b610cd25760405162461bcd60e51b815260040161061790612287565b6000838152600660205260409020805483908110610cf257610cf261246c565b906000526020600020906003020160010154905092915050565b60606001805461052c906123b5565b610d2633838361150e565b5050565b6000610d35826111d8565b610d515760405162461bcd60e51b815260040161061790612287565b5060009081526006602052604090205490565b6000610d6f826111d8565b610d8b5760405162461bcd60e51b815260040161061790612287565b60005b600083815260066020526040902054811015610df5576000838152600660205260409020805482908110610dc457610dc461246c565b90600052602060002090600302016001015482610de19190612327565b915080610ded81612411565b915050610d8e565b50919050565b610e053383611263565b610e215760405162461bcd60e51b8152600401610617906122d6565b610e2d848484846115d5565b50505050565b6060610e3e826111d8565b610e5a5760405162461bcd60e51b815260040161061790612287565b6104b182610f43565b6000610e6e826111d8565b610e8a5760405162461bcd60e51b815260040161061790612287565b6000828152600760205260409020546201518090610ea89042612372565b6104b1919061233f565b6000610ebd826111d8565b610ed95760405162461bcd60e51b815260040161061790612287565b60005b600083815260066020526040902054811015610df5576000838152600660205260409020805482908110610f1257610f1261246c565b90600052602060002090600302016002015482610f2f9190612327565b915080610f3b81612411565b915050610edc565b60606000610f5083610783565b905060606001821115610f7d576040518060800160405280605a815260200161265b605a91399050611014565b6002821115610fa65760405180608001604052806058815260200161250c605891399050611014565b6003821115610fcf576040518060800160405280605c81526020016125a4605c91399050611014565b6004821115610ff8576040518060800160405280605b8152602001612600605b91399050611014565b6040518060800160405280605a81526020016124b2605a913990505b600061101e61051d565b61102661051d565b8361103086611608565b6040516020016110439493929190612055565b604051602081830303815290604052905061107c816040516020016110689190611fa1565b604051602081830303815290604052611706565b60405160200161108c91906121a0565b6040516020818303038152906040529350505050919050565b60606110b0826111d8565b6110cc5760405162461bcd60e51b815260040161061790612287565b604080516020810190915260008082525b6000848152600660205260409020548110156111d15760008481526006602052604090205461110d826001612327565b101561116b5760008481526006602052604090208054839190839081106111365761113661246c565b9060005260206000209060030201600001604051602001611158929190612004565b60408051601f19818403019052526111bf565b600084815260066020526040902080548391908390811061118e5761118e61246c565b90600052602060002090600302016000016040516020016111b0929190611fbd565b60408051601f19818403019052525b806111c981612411565b9150506110dd565b5092915050565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061122a82610a99565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061126e826111d8565b6112cf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610617565b60006112da83610a99565b9050806001600160a01b0316846001600160a01b0316148061132157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806113455750836001600160a01b031661133a846105af565b6001600160a01b0316145b949350505050565b826001600160a01b031661136082610a99565b6001600160a01b0316146113c45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610617565b6001600160a01b0382166114265760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610617565b61143183838361186e565b61143c6000826111f5565b6001600160a01b0383166000908152600360205260408120805460019290611465908490612372565b90915550506001600160a01b0382166000908152600360205260408120805460019290611493908490612327565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610d268282604051806020016040528060008152506118d4565b816001600160a01b0316836001600160a01b031614156115705760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610617565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101610a8c565b6115e084848461134d565b6115ec84848484611907565b610e2d5760405162461bcd60e51b815260040161061790612235565b60608161162c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611656578061164081612411565b915061164f9050600a8361233f565b9150611630565b60008167ffffffffffffffff81111561167157611671612482565b6040519080825280601f01601f19166020018201604052801561169b576020820181803683370190505b5090505b8415611345576116b0600183612372565b91506116bd600a8661242c565b6116c8906030612327565b60f81b8183815181106116dd576116dd61246c565b60200101906001600160f81b031916908160001a9053506116ff600a8661233f565b945061169f565b606081516000141561172657505060408051602081019091526000815290565b600060405180606001604052806040815260200161256460409139905060006003845160026117559190612327565b61175f919061233f565b61176a906004612353565b90506000611779826020612327565b67ffffffffffffffff81111561179157611791612482565b6040519080825280601f01601f1916602001820160405280156117bb576020820181803683370190505b509050818152600183018586518101602084015b818310156118295760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016117cf565b600389510660018114611843576002811461185457611860565b613d3d60f01b600119830152611860565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b0383161561074d5760405162461bcd60e51b815260206004820152602660248201527f4552433732313a207472616e736665722066726f6d206e6f6e2d7a65726f206160448201526564647265737360d01b6064820152608401610617565b6118de8383611a14565b6118eb6000848484611907565b61074d5760405162461bcd60e51b815260040161061790612235565b60006001600160a01b0384163b15611a0957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061194b9033908990889088906004016121e5565b602060405180830381600087803b15801561196557600080fd5b505af1925050508015611995575060408051601f3d908101601f1916820190925261199291810190611e0e565b60015b6119ef573d8080156119c3576040519150601f19603f3d011682016040523d82523d6000602084013e6119c8565b606091505b5080516119e75760405162461bcd60e51b815260040161061790612235565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611345565b506001949350505050565b6001600160a01b038216611a6a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610617565b611a73816111d8565b15611ac05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610617565b611acc6000838361186e565b6001600160a01b0382166000908152600360205260408120805460019290611af5908490612327565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611b5f906123b5565b90600052602060002090601f016020900481019282611b815760008555611bc7565b82601f10611b9a57805160ff1916838001178555611bc7565b82800160010185558215611bc7579182015b82811115611bc7578251825591602001919060010190611bac565b50611bd3929150611bd7565b5090565b5b80821115611bd35760008155600101611bd8565b600067ffffffffffffffff80841115611c0757611c07612482565b604051601f8501601f19908116603f01168101908282118183101715611c2f57611c2f612482565b81604052809350858152868686011115611c4857600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611c7957600080fd5b919050565b600060208284031215611c9057600080fd5b611c9982611c62565b9392505050565b60008060408385031215611cb357600080fd5b611cbc83611c62565b9150611cca60208401611c62565b90509250929050565b600080600060608486031215611ce857600080fd5b611cf184611c62565b9250611cff60208501611c62565b9150604084013590509250925092565b60008060008060808587031215611d2557600080fd5b611d2e85611c62565b9350611d3c60208601611c62565b925060408501359150606085013567ffffffffffffffff811115611d5f57600080fd5b8501601f81018713611d7057600080fd5b611d7f87823560208401611bec565b91505092959194509250565b60008060408385031215611d9e57600080fd5b611da783611c62565b915060208301358015158114611dbc57600080fd5b809150509250929050565b60008060408385031215611dda57600080fd5b611de383611c62565b946020939093013593505050565b600060208284031215611e0357600080fd5b8135611c9981612498565b600060208284031215611e2057600080fd5b8151611c9981612498565b60008060408385031215611e3e57600080fd5b823567ffffffffffffffff811115611e5557600080fd5b8301601f81018513611e6657600080fd5b611e7585823560208401611bec565b95602094909401359450505050565b600060208284031215611e9657600080fd5b5035919050565b60008060408385031215611eb057600080fd5b50508035926020909101359150565b60008151808452611ed7816020860160208601612389565b601f01601f19169290920160200192915050565b60008151611efd818560208601612389565b9290920192915050565b8054600090600181811c9080831680611f2157607f831692505b6020808410821415611f4357634e487b7160e01b600052602260045260246000fd5b818015611f575760018114611f6857611f95565b60ff19861689528489019650611f95565b60008881526020902060005b86811015611f8d5781548b820152908501908301611f74565b505084890196505b50505050505092915050565b60008251611fb3818460208701612389565b9190910192915050565b60008351611fcf818460208801612389565b7468747470733a2f2f697066732e696f2f697066732f60581b908301908152611ffb6015820185611f07565b95945050505050565b60008351612016818460208801612389565b7468747470733a2f2f697066732e696f2f697066732f60581b9083019081526120426015820185611f07565b600b60fa1b815260010195945050505050565b683d913730b6b2911d1160b91b8152845160009061207a816009850160208a01612389565b6a0204d656d626572736869760ac1b600991840191820181905271111610113232b9b1b934b83a34b7b7111d1160711b601483015286516120c2816026850160208b01612389565b60269201918201526c1116101134b6b0b3b2911d101160991b603182015284516120f381603e840160208901612389565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a9101603e810191909152720891dbdd995c9b985b98d94814d8dbdc99488b606a1b605e82015268113b30b63ab2911d1160b91b607182015261216b61215c607a830186611eeb565b62227d5d60e81b815260030190565b979650505050505050565b7468747470733a2f2f697066732e696f2f697066732f60581b81526000611c996015830184611f07565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516121d881601d850160208701612389565b91909101601d0192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061221890830184611ebf565b9695505050505050565b602081526000611c996020830184611ebf565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561233a5761233a612440565b500190565b60008261234e5761234e612456565b500490565b600081600019048311821515161561236d5761236d612440565b500290565b60008282101561238457612384612440565b500390565b60005b838110156123a457818101518382015260200161238c565b83811115610e2d5750506000910152565b600181811c908216806123c957607f821691505b60208210811415610df557634e487b7160e01b600052602260045260246000fd5b60006001600160801b038083168181141561240757612407612440565b6001019392505050565b600060001982141561242557612425612440565b5060010190565b60008261243b5761243b612456565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146124ae57600080fd5b5056fe68747470733a2f2f6c696e6b2e73746f726a73686172652e696f2f6a75627a7633676b6777657a35663435783772676976376e733732612f64656d6f2d6275636b657425324669636f6e2d72616e6b2d62726f6e7a652e706e6768747470733a2f2f6c696e6b2e73746f726a73686172652e696f2f6a7534646c6578366f366c79666a7177787772633736756135637a712f64656d6f2d6275636b657425324669636f6e2d72616e6b2d676f6c642e706e674142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f68747470733a2f2f6c696e6b2e73746f726a73686172652e696f2f6a7869616f76696b6b757763757066716b717565696e6e6e6f366b712f64656d6f2d6275636b657425324669636f6e2d72616e6b2d706c6174696e756d2e706e6768747470733a2f2f6c696e6b2e73746f726a73686172652e696f2f6a75726b63627a366b6163776e6a65667235626872727563766664712f64656d6f2d6275636b657425324669636f6e2d72616e6b2d6469616d6f6e642e706e6768747470733a2f2f6c696e6b2e73746f726a73686172652e696f2f6a7678726a3473766e666e7a3636346c6e706f61776d776e7a7532712f64656d6f2d6275636b657425324669636f6e2d72616e6b2d73696c7665722e706e67a264697066735822122012bd6d2f36fbf22d5baee8a51565b07ea5aa9c5786dea658d6e2a9eeb2e380ea64736f6c63430008070033a2646970667358221220208ff38a5fbd273ca28b59725a4277c47f6ac4ba35253828d874dee3a4f3183064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2843,
        "contract": "contracts/PewNFTFactory.sol:PewNFTFactory",
        "label": "collectionsCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2848,
        "contract": "contracts/PewNFTFactory.sol:PewNFTFactory",
        "label": "collections",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(PewNFT)2837)"
      },
      {
        "astId": 2850,
        "contract": "contracts/PewNFTFactory.sol:PewNFTFactory",
        "label": "PEW_CORE",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(PewNFT)2837": {
        "encoding": "inplace",
        "label": "contract PewNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(PewNFT)2837)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract PewNFT)",
        "numberOfBytes": "32",
        "value": "t_contract(PewNFT)2837"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}