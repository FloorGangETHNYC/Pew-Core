{
  "address": "0x37dA2743784594C729734E0290Bf19f6c6f251C5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "DAOCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "DAOJoined",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PEW_NFT_FACTORY",
      "outputs": [
        {
          "internalType": "contract PewNFTFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "addContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        }
      ],
      "name": "createDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIds",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "detailsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contributionIndex",
          "type": "uint256"
        }
      ],
      "name": "downvote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "joinDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pewNFTFactory",
          "type": "address"
        }
      ],
      "name": "setPewNFTFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contributionIndex",
          "type": "uint256"
        }
      ],
      "name": "upvote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40dda66ed994f52fd744d7278e4646584b61a5c77352ffc4d1447e36f0333322",
  "receipt": {
    "to": null,
    "from": "0x2C1CC2df33B3EC74Cc4fD83B539789f79f5c797B",
    "contractAddress": "0x37dA2743784594C729734E0290Bf19f6c6f251C5",
    "transactionIndex": 4,
    "gasUsed": "804012",
    "logsBloom": "0x
    "blockHash": "0x1519764120312bb811c95148b5003987a77fe706a5f5f075b92e77a61e2daf5f",
    "transactionHash": "0x40dda66ed994f52fd744d7278e4646584b61a5c77352ffc4d1447e36f0333322",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 26907358,
        "transactionHash": "0x40dda66ed994f52fd744d7278e4646584b61a5c77352ffc4d1447e36f0333322",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002c1cc2df33b3ec74cc4fd83b539789f79f5c797b",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005d3fdc0b631200000000000000000000000000000000000000000000000008a41edcd022b6a2b0000000000000000000000000000000000000000000003c6578de94fdc1400210000000000000000000000000000000000000000000000008a3c19cf4175390b0000000000000000000000000000000000000000000003c65793bd4d9cca3141",
        "logIndex": 19,
        "blockHash": "0x1519764120312bb811c95148b5003987a77fe706a5f5f075b92e77a61e2daf5f"
      }
    ],
    "blockNumber": 26907358,
    "cumulativeGasUsed": "1587295",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b438200b508f63920f92d36b500dd062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"DAOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DAOJoined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PEW_NFT_FACTORY\",\"outputs\":[{\"internalType\":\"contract PewNFTFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"addContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"}],\"name\":\"createDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"detailsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contributionIndex\",\"type\":\"uint256\"}],\"name\":\"downvote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"joinDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pewNFTFactory\",\"type\":\"address\"}],\"name\":\"setPewNFTFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contributionIndex\",\"type\":\"uint256\"}],\"name\":\"upvote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addContribution(uint256,uint256,string)\":{\"details\":\"Include a offchain signer to verify if the structure of the datafile is correct\",\"params\":{\"_id\":\"Id of the DAO\",\"_tokenId\":\"TokenId of the token\",\"ipfsHash\":\"Metadata Hash of the contribution\"}},\"createDAO(string,string,string)\":{\"details\":\"Include a offchain signer to verify if the structure of the datafile is correct\",\"params\":{\"metadataHash\":\"Metadata Hash of the DAO\",\"name\":\"The name of the DAO.\",\"symbol\":\"The symbol of the DAO.\"}},\"downvote(uint256,uint256,uint256)\":{\"params\":{\"_contributionIndex\":\"Index of the contribution\",\"_id\":\"Id of the DAO\",\"_tokenId\":\"TokenId of the token\"}},\"upvote(uint256,uint256,uint256)\":{\"params\":{\"_contributionIndex\":\"Index of the contribution\",\"_id\":\"Id of the DAO\",\"_tokenId\":\"TokenId of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addContribution(uint256,uint256,string)\":{\"notice\":\"Add a contributement statement\"},\"createDAO(string,string,string)\":{\"notice\":\"Create a new DAO.\"},\"downvote(uint256,uint256,uint256)\":{\"notice\":\"Downvote a contribution\"},\"upvote(uint256,uint256,uint256)\":{\"notice\":\"Upvote a contribution\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PewCore.sol\":\"PewCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf82090d06cc06c498ae5847e389e1fe8cef231e9cf19f81fee476cf581e4519d\",\"license\":\"MIT\"},\"contracts/PewCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./PewNFTFactory.sol\\\";\\r\\n\\r\\ncontract PewCore {\\r\\n    PewNFTFactory public PEW_NFT_FACTORY;\\r\\n\\r\\n    struct DAO {\\r\\n        address contractAddress;\\r\\n        string detailsHash;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => DAO) public daoIds;\\r\\n\\r\\n    uint256 public daoCounter;\\r\\n\\r\\n    event DAOCreated(string name, string symbol, address dao);\\r\\n    event DAOJoined(address indexed member, uint256 indexed _id);\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new DAO.\\r\\n     * @param name The name of the DAO.\\r\\n     * @param symbol The symbol of the DAO.\\r\\n     * @param metadataHash Metadata Hash of the DAO\\r\\n     * @dev Include a offchain signer to verify if the structure of the datafile is correct\\r\\n     */\\r\\n    function createDAO(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory metadataHash\\r\\n    ) public {\\r\\n        PewNFT pewNFT = PEW_NFT_FACTORY.createCollection(\\r\\n            name,\\r\\n            symbol,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        daoIds[daoCounter] = DAO(address(pewNFT), metadataHash);\\r\\n        daoCounter++;\\r\\n        emit DAOCreated(name, symbol, address(pewNFT));\\r\\n    }\\r\\n\\r\\n    function joinDAO(uint256 _id) public {\\r\\n        require(\\r\\n            PEW_NFT_FACTORY.getCollection(_id).balanceOf(msg.sender) == 0,\\r\\n            \\\"User already minted\\\"\\r\\n        );\\r\\n        PEW_NFT_FACTORY.getCollection(_id).mint(msg.sender);\\r\\n\\r\\n        emit DAOJoined(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add a contributement statement\\r\\n     * @param _id Id of the DAO\\r\\n     * @param _tokenId TokenId of the token\\r\\n     * @param ipfsHash Metadata Hash of the contribution\\r\\n     * @dev Include a offchain signer to verify if the structure of the datafile is correct\\r\\n     */\\r\\n    function addContribution(\\r\\n        uint256 _id,\\r\\n        uint256 _tokenId,\\r\\n        string memory ipfsHash\\r\\n    ) public {\\r\\n        require(bytes(ipfsHash).length == 46, \\\"Incorrect Hash Length\\\");\\r\\n        require(bytes(ipfsHash)[0] == 0x51, \\\"1st char not Q\\\");\\r\\n        require(bytes(ipfsHash)[1] == 0x6d, \\\"2nd chat not m\\\");\\r\\n\\r\\n        PEW_NFT_FACTORY.getCollection(_id).addContribution(ipfsHash, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upvote a contribution\\r\\n     * @param _id Id of the DAO\\r\\n     * @param _tokenId TokenId of the token\\r\\n     * @param _contributionIndex Index of the contribution\\r\\n     */\\r\\n    function upvote(\\r\\n        uint256 _id,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _contributionIndex\\r\\n    ) public {\\r\\n        PEW_NFT_FACTORY.getCollection(_id).upvote(_tokenId, _contributionIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Downvote a contribution\\r\\n     * @param _id Id of the DAO\\r\\n     * @param _tokenId TokenId of the token\\r\\n     * @param _contributionIndex Index of the contribution\\r\\n     */\\r\\n    function downvote(\\r\\n        uint256 _id,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _contributionIndex\\r\\n    ) public {\\r\\n        PEW_NFT_FACTORY.getCollection(_id).downvote(\\r\\n            _tokenId,\\r\\n            _contributionIndex\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getContract(uint256 _id) public view returns (address) {\\r\\n        return daoIds[_id].contractAddress;\\r\\n    }\\r\\n\\r\\n    function setPewNFTFactory(address _pewNFTFactory) public {\\r\\n        PEW_NFT_FACTORY = PewNFTFactory(_pewNFTFactory);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x50abd1db655e87a3d9323401627b7604edfc05828915c552a3e1a03eaeaf31a7\",\"license\":\"MIT\"},\"contracts/PewNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\ncontract PewNFT is ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Store data about the contributions made by a user holding the token\\r\\n    struct Contribution {\\r\\n        string ipfsHash;\\r\\n        uint256 upvotes;\\r\\n        uint256 downvotes;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Contribution[]) contributions;\\r\\n    mapping(uint256 => uint256) mintedTime;\\r\\n\\r\\n    address public PEW_CORE;\\r\\n    string public baseURI;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    event ContributionAdded(\\r\\n        address indexed contributor,\\r\\n        uint256 indexed tokenId,\\r\\n        string ipfsHash\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _pewCore\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        PEW_CORE = address(_pewCore);\\r\\n    }\\r\\n\\r\\n    modifier onlyPew() {\\r\\n        require(msg.sender == address(PEW_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to) external onlyPew {\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        mintedTime[_currentIndex] = block.timestamp;\\r\\n        _currentIndex++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Contribution to the token.\\r\\n     */\\r\\n    function addContribution(string memory ipfsHash, uint256 tokenId)\\r\\n        external\\r\\n        onlyPew\\r\\n    {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        Contribution memory contribution = Contribution(ipfsHash, 0, 0);\\r\\n        contributions[tokenId].push(contribution);\\r\\n        emit ContributionAdded(msg.sender, tokenId, ipfsHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upvote a contribution.\\r\\n     */\\r\\n    function upvote(uint256 tokenId, uint256 contributionIndex)\\r\\n        external\\r\\n        onlyPew\\r\\n    {\\r\\n        Contribution storage contribution = contributions[tokenId][\\r\\n            contributionIndex\\r\\n        ];\\r\\n        contribution.upvotes++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Downvote a contribution.\\r\\n     */\\r\\n    function downvote(uint256 tokenId, uint256 contributionIndex)\\r\\n        external\\r\\n        onlyPew\\r\\n    {\\r\\n        Contribution storage contribution = contributions[tokenId][\\r\\n            contributionIndex\\r\\n        ];\\r\\n        contribution.downvotes++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     * @dev gets baseURI from contract state variable\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return buildMetadata(tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the metadata required in accordance ot Opensea requirements\\r\\n    /// @param _tokenId Policy ID which will also be the NFT token ID\\r\\n    /// @dev Can change public to internal\\r\\n    function buildMetadata(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 _governanceScore = getGovernanceScore(_tokenId);\\r\\n        string memory image;\\r\\n        // NFTS that level up based on the governance score of the token.\\r\\n        // Storj is used to host the images. Storj enables fast and secure cloud storage and it is built ontop of IPFS.\\r\\n        if (_governanceScore > 1) {\\r\\n            image = \\\"https://link.storjshare.io/jvxrj4svnfnz664lnpoawmwnzu2q/demo-bucket%2Ficon-rank-silver.png\\\";\\r\\n        } else if (_governanceScore > 2) {\\r\\n            image = \\\"https://link.storjshare.io/ju4dlex6o6lyfjqwxwrc76ua5czq/demo-bucket%2Ficon-rank-gold.png\\\";\\r\\n        } else if (_governanceScore > 3) {\\r\\n            image = \\\"https://link.storjshare.io/jxiaovikkuwcupfqkqueinnno6kq/demo-bucket%2Ficon-rank-platinum.png\\\";\\r\\n        } else if (_governanceScore > 4) {\\r\\n            image = \\\"https://link.storjshare.io/jurkcbz6kacwnjefr5bhrrucvfdq/demo-bucket%2Ficon-rank-diamond.png\\\";\\r\\n        } else {\\r\\n            image = \\\"https://link.storjshare.io/jubzv3gkgwez5f45x7rgiv7ns72a/demo-bucket%2Ficon-rank-bronze.png\\\";\\r\\n        }\\r\\n        bytes memory m1 = abi.encodePacked(\\r\\n            '{\\\"name\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"description\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            image,\\r\\n            // adding policyHolder\\r\\n            '\\\", \\\"attributes\\\": [{\\\"trait_type\\\":\\\"Governance Score\\\",',\\r\\n            '\\\"value\\\":\\\"',\\r\\n            Strings.toString(_governanceScore),\\r\\n            '\\\"}]'\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(bytes.concat(m1))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getUpvotes(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return contributions[tokenId][index].upvotes;\\r\\n    }\\r\\n\\r\\n    function getDownvotes(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return contributions[tokenId][index].downvotes;\\r\\n    }\\r\\n\\r\\n    function getTotalUpvotes(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _totalUpvotes)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            _totalUpvotes += contributions[tokenId][i].upvotes;\\r\\n        }\\r\\n        return _totalUpvotes;\\r\\n    }\\r\\n\\r\\n    function getTotalDownvotes(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _totalDownvotes)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            _totalDownvotes += contributions[tokenId][i].downvotes;\\r\\n        }\\r\\n        return _totalDownvotes;\\r\\n    }\\r\\n\\r\\n    function getContribution(uint256 tokenId, uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"https://ipfs.io/ipfs/\\\",\\r\\n                    contributions[tokenId][index].ipfsHash\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getAllContributions(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory contributionsString = \\\"\\\";\\r\\n        for (uint256 i = 0; i < contributions[tokenId].length; i++) {\\r\\n            if (i + 1 < contributions[tokenId].length) {\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        contributionsString,\\r\\n                        \\\"https://ipfs.io/ipfs/\\\",\\r\\n                        contributions[tokenId][i].ipfsHash,\\r\\n                        \\\",\\\"\\r\\n                    )\\r\\n                );\\r\\n            } else {\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        contributionsString,\\r\\n                        \\\"https://ipfs.io/ipfs/\\\",\\r\\n                        contributions[tokenId][i].ipfsHash\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return contributionsString;\\r\\n    }\\r\\n\\r\\n    function getContributionCount(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _contributionCount)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return contributions[tokenId].length;\\r\\n    }\\r\\n\\r\\n    function getTimeScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return (block.timestamp - mintedTime[tokenId]) / 1 days;\\r\\n    }\\r\\n\\r\\n    function getGovernanceScore(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _governanceScore)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        uint256 _totalUpvotes = getTotalUpvotes(tokenId);\\r\\n        uint256 _totalDownvotes = getTotalDownvotes(tokenId);\\r\\n        uint256 _timeScore = getTimeScore(tokenId);\\r\\n\\r\\n        if (_totalDownvotes > _totalUpvotes) {\\r\\n            _governanceScore = 0;\\r\\n        } else {\\r\\n            _governanceScore = _totalUpvotes - _totalDownvotes + _timeScore;\\r\\n        }\\r\\n\\r\\n        return _governanceScore;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xea26b65f7bbb91071c7104c81e163781e65534c4d3facdb6f82205a719255150\",\"license\":\"MIT\"},\"contracts/PewNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./PewNFT.sol\\\";\\r\\n\\r\\ncontract PewNFTFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => PewNFT) collections;\\r\\n\\r\\n    address public PEW_CORE;\\r\\n\\r\\n    event CollectionCreated(uint256 id, address collection);\\r\\n\\r\\n    modifier onlyPew() {\\r\\n        require(msg.sender == address(PEW_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _pewCore) {\\r\\n        PEW_CORE = address(_pewCore);\\r\\n    }\\r\\n\\r\\n    function createCollection(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address _pewCore\\r\\n    ) public onlyPew returns (PewNFT) {\\r\\n        PewNFT pewAddress = new PewNFT(name, symbol, _pewCore);\\r\\n\\r\\n        collections[collectionsCounter] = pewAddress;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        return pewAddress;\\r\\n        // emit CollectionCreated()\\r\\n    }\\r\\n\\r\\n    function getCollection(uint256 id) public view returns (PewNFT) {\\r\\n        return collections[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd646c0a4ec2ca102c6db305ad5ad4743a29345c53b5b310668cdf837646c837d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d96806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a43381a511610066578063a43381a514610154578063bd3dde9614610167578063cfb83a8d1461017a578063f5c8d2321461018d578063f80efd28146101ae57600080fd5b80633fbdf32c146100a357806357333978146100b8578063644fa0d6146100cb5780636ebc8c86146100fb5780638d2e0a6914610141575b600080fd5b6100b66100b1366004610b3b565b6101c5565b005b6100b66100c6366004610bb3565b610409565b6100b66100d9366004610a72565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b610124610109366004610b3b565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b661014f366004610bb3565b6104ee565b600054610124906001600160a01b031681565b6100b6610175366004610b6d565b6105a0565b6100b6610188366004610ab3565b61075e565b6101a061019b366004610b3b565b61089c565b604051610138929190610c2c565b6101b760025481565b604051908152602001610138565b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561020957600080fd5b505afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102419190610a96565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610b54565b156103025760405162461bcd60e51b8152602060048201526013602482015272155cd95c88185b1c9958591e481b5a5b9d1959606a1b60448201526064015b60405180910390fd5b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e9190610a96565b6040516335313c2160e11b81523360048201526001600160a01b039190911690636a62784290602401600060405180830381600087803b1580156103c157600080fd5b505af11580156103d5573d6000803e3d6000fd5b50506040518392503391507fc6fe9b78def1629047bd69918cbc1ef87aeefe1543a67e54cb8fcd50711ec6ce90600090a350565b600054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190610a96565b604051630bcf9d3f60e31b815260048101849052602481018390526001600160a01b039190911690635e7ce9f8906044015b600060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b50505050505050565b600054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610a96565b604051630353ff7f60e11b815260048101849052602481018390526001600160a01b0391909116906306a7fefe906044016104b7565b8051602e146105e95760405162461bcd60e51b8152602060048201526015602482015274092dcc6dee4e4cac6e84090c2e6d04098cadccee8d605b1b60448201526064016102f9565b806000815181106105fc576105fc610d1c565b6020910101516001600160f81b031916605160f81b1461064f5760405162461bcd60e51b815260206004820152600e60248201526d3173742063686172206e6f74205160901b60448201526064016102f9565b8060018151811061066257610662610d1c565b6020910101516001600160f81b031916606d60f81b146106b55760405162461bcd60e51b815260206004820152600e60248201526d326e642063686174206e6f74206d60901b60448201526064016102f9565b600054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c289060240160206040518083038186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107319190610a96565b6001600160a01b0316635f83b8ea82846040518363ffffffff1660e01b81526004016104b7929190610c96565b6000805460405163d0ae65db60e01b81526001600160a01b039091169063d0ae65db9061079390879087903090600401610c58565b602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190610a96565b6040805180820182526001600160a01b038381168252602080830187815260025460009081526001808452959020845181546001600160a01b031916941693909317835551805195965092949193610843939085019291019061094c565b5050600280549150600061085683610cf3565b91905055507f6d8073b3c5d7e3a29e9539222aa4da4b3728f3e94edcef7840a1fc244e51deaf84848360405161088e93929190610c58565b60405180910390a150505050565b6001602081905260009182526040909120805491810180546001600160a01b03909316926108c990610cb8565b80601f01602080910402602001604051908101604052809291908181526020018280546108f590610cb8565b80156109425780601f1061091757610100808354040283529160200191610942565b820191906000526020600020905b81548152906001019060200180831161092557829003601f168201915b5050505050905082565b82805461095890610cb8565b90600052602060002090601f01602090048101928261097a57600085556109c0565b82601f1061099357805160ff19168380011785556109c0565b828001600101855582156109c0579182015b828111156109c05782518255916020019190600101906109a5565b506109cc9291506109d0565b5090565b5b808211156109cc57600081556001016109d1565b600082601f8301126109f657600080fd5b813567ffffffffffffffff80821115610a1157610a11610d32565b604051601f8301601f19908116603f01168101908282118183101715610a3957610a39610d32565b81604052838152866020858801011115610a5257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610a8457600080fd5b8135610a8f81610d48565b9392505050565b600060208284031215610aa857600080fd5b8151610a8f81610d48565b600080600060608486031215610ac857600080fd5b833567ffffffffffffffff80821115610ae057600080fd5b610aec878388016109e5565b94506020860135915080821115610b0257600080fd5b610b0e878388016109e5565b93506040860135915080821115610b2457600080fd5b50610b31868287016109e5565b9150509250925092565b600060208284031215610b4d57600080fd5b5035919050565b600060208284031215610b6657600080fd5b5051919050565b600080600060608486031215610b8257600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610ba757600080fd5b610b31868287016109e5565b600080600060608486031215610bc857600080fd5b505081359360208301359350604090920135919050565b6000815180845260005b81811015610c0557602081850181015186830182015201610be9565b81811115610c17576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610c5090830184610bdf565b949350505050565b606081526000610c6b6060830186610bdf565b8281036020840152610c7d8186610bdf565b91505060018060a01b0383166040830152949350505050565b604081526000610ca96040830185610bdf565b90508260208301529392505050565b600181811c90821680610ccc57607f821691505b60208210811415610ced57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610d1557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d5d57600080fd5b5056fea26469706673582212203318742b15f56ee8bcf2d6d9f8fab59f1422e7ff0c1a5461b808920afcc2724864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a43381a511610066578063a43381a514610154578063bd3dde9614610167578063cfb83a8d1461017a578063f5c8d2321461018d578063f80efd28146101ae57600080fd5b80633fbdf32c146100a357806357333978146100b8578063644fa0d6146100cb5780636ebc8c86146100fb5780638d2e0a6914610141575b600080fd5b6100b66100b1366004610b3b565b6101c5565b005b6100b66100c6366004610bb3565b610409565b6100b66100d9366004610a72565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b610124610109366004610b3b565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b661014f366004610bb3565b6104ee565b600054610124906001600160a01b031681565b6100b6610175366004610b6d565b6105a0565b6100b6610188366004610ab3565b61075e565b6101a061019b366004610b3b565b61089c565b604051610138929190610c2c565b6101b760025481565b604051908152602001610138565b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561020957600080fd5b505afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102419190610a96565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610b54565b156103025760405162461bcd60e51b8152602060048201526013602482015272155cd95c88185b1c9958591e481b5a5b9d1959606a1b60448201526064015b60405180910390fd5b600054604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e9190610a96565b6040516335313c2160e11b81523360048201526001600160a01b039190911690636a62784290602401600060405180830381600087803b1580156103c157600080fd5b505af11580156103d5573d6000803e3d6000fd5b50506040518392503391507fc6fe9b78def1629047bd69918cbc1ef87aeefe1543a67e54cb8fcd50711ec6ce90600090a350565b600054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190610a96565b604051630bcf9d3f60e31b815260048101849052602481018390526001600160a01b039190911690635e7ce9f8906044015b600060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b50505050505050565b600054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c289060240160206040518083038186803b15801561053257600080fd5b505afa158015610546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056a9190610a96565b604051630353ff7f60e11b815260048101849052602481018390526001600160a01b0391909116906306a7fefe906044016104b7565b8051602e146105e95760405162461bcd60e51b8152602060048201526015602482015274092dcc6dee4e4cac6e84090c2e6d04098cadccee8d605b1b60448201526064016102f9565b806000815181106105fc576105fc610d1c565b6020910101516001600160f81b031916605160f81b1461064f5760405162461bcd60e51b815260206004820152600e60248201526d3173742063686172206e6f74205160901b60448201526064016102f9565b8060018151811061066257610662610d1c565b6020910101516001600160f81b031916606d60f81b146106b55760405162461bcd60e51b815260206004820152600e60248201526d326e642063686174206e6f74206d60901b60448201526064016102f9565b600054604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c289060240160206040518083038186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107319190610a96565b6001600160a01b0316635f83b8ea82846040518363ffffffff1660e01b81526004016104b7929190610c96565b6000805460405163d0ae65db60e01b81526001600160a01b039091169063d0ae65db9061079390879087903090600401610c58565b602060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e59190610a96565b6040805180820182526001600160a01b038381168252602080830187815260025460009081526001808452959020845181546001600160a01b031916941693909317835551805195965092949193610843939085019291019061094c565b5050600280549150600061085683610cf3565b91905055507f6d8073b3c5d7e3a29e9539222aa4da4b3728f3e94edcef7840a1fc244e51deaf84848360405161088e93929190610c58565b60405180910390a150505050565b6001602081905260009182526040909120805491810180546001600160a01b03909316926108c990610cb8565b80601f01602080910402602001604051908101604052809291908181526020018280546108f590610cb8565b80156109425780601f1061091757610100808354040283529160200191610942565b820191906000526020600020905b81548152906001019060200180831161092557829003601f168201915b5050505050905082565b82805461095890610cb8565b90600052602060002090601f01602090048101928261097a57600085556109c0565b82601f1061099357805160ff19168380011785556109c0565b828001600101855582156109c0579182015b828111156109c05782518255916020019190600101906109a5565b506109cc9291506109d0565b5090565b5b808211156109cc57600081556001016109d1565b600082601f8301126109f657600080fd5b813567ffffffffffffffff80821115610a1157610a11610d32565b604051601f8301601f19908116603f01168101908282118183101715610a3957610a39610d32565b81604052838152866020858801011115610a5257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610a8457600080fd5b8135610a8f81610d48565b9392505050565b600060208284031215610aa857600080fd5b8151610a8f81610d48565b600080600060608486031215610ac857600080fd5b833567ffffffffffffffff80821115610ae057600080fd5b610aec878388016109e5565b94506020860135915080821115610b0257600080fd5b610b0e878388016109e5565b93506040860135915080821115610b2457600080fd5b50610b31868287016109e5565b9150509250925092565b600060208284031215610b4d57600080fd5b5035919050565b600060208284031215610b6657600080fd5b5051919050565b600080600060608486031215610b8257600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610ba757600080fd5b610b31868287016109e5565b600080600060608486031215610bc857600080fd5b505081359360208301359350604090920135919050565b6000815180845260005b81811015610c0557602081850181015186830182015201610be9565b81811115610c17576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610c5090830184610bdf565b949350505050565b606081526000610c6b6060830186610bdf565b8281036020840152610c7d8186610bdf565b91505060018060a01b0383166040830152949350505050565b604081526000610ca96040830185610bdf565b90508260208301529392505050565b600181811c90821680610ccc57607f821691505b60208210811415610ced57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610d1557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d5d57600080fd5b5056fea26469706673582212203318742b15f56ee8bcf2d6d9f8fab59f1422e7ff0c1a5461b808920afcc2724864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addContribution(uint256,uint256,string)": {
        "details": "Include a offchain signer to verify if the structure of the datafile is correct",
        "params": {
          "_id": "Id of the DAO",
          "_tokenId": "TokenId of the token",
          "ipfsHash": "Metadata Hash of the contribution"
        }
      },
      "createDAO(string,string,string)": {
        "details": "Include a offchain signer to verify if the structure of the datafile is correct",
        "params": {
          "metadataHash": "Metadata Hash of the DAO",
          "name": "The name of the DAO.",
          "symbol": "The symbol of the DAO."
        }
      },
      "downvote(uint256,uint256,uint256)": {
        "params": {
          "_contributionIndex": "Index of the contribution",
          "_id": "Id of the DAO",
          "_tokenId": "TokenId of the token"
        }
      },
      "upvote(uint256,uint256,uint256)": {
        "params": {
          "_contributionIndex": "Index of the contribution",
          "_id": "Id of the DAO",
          "_tokenId": "TokenId of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addContribution(uint256,uint256,string)": {
        "notice": "Add a contributement statement"
      },
      "createDAO(string,string,string)": {
        "notice": "Create a new DAO."
      },
      "downvote(uint256,uint256,uint256)": {
        "notice": "Downvote a contribution"
      },
      "upvote(uint256,uint256,uint256)": {
        "notice": "Upvote a contribution"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1920,
        "contract": "contracts/PewCore.sol:PewCore",
        "label": "PEW_NFT_FACTORY",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PewNFTFactory)2934"
      },
      {
        "astId": 1930,
        "contract": "contracts/PewCore.sol:PewCore",
        "label": "daoIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(DAO)1925_storage)"
      },
      {
        "astId": 1932,
        "contract": "contracts/PewCore.sol:PewCore",
        "label": "daoCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(PewNFTFactory)2934": {
        "encoding": "inplace",
        "label": "contract PewNFTFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(DAO)1925_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PewCore.DAO)",
        "numberOfBytes": "32",
        "value": "t_struct(DAO)1925_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DAO)1925_storage": {
        "encoding": "inplace",
        "label": "struct PewCore.DAO",
        "members": [
          {
            "astId": 1922,
            "contract": "contracts/PewCore.sol:PewCore",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1924,
            "contract": "contracts/PewCore.sol:PewCore",
            "label": "detailsHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}