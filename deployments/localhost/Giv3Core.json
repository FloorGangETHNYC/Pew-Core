{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IImageStorage",
          "name": "staticImageStorage",
          "type": "address"
        },
        {
          "internalType": "contract IImageStorage",
          "name": "dynamicImageStorage",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_usdt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        }
      ],
      "name": "DAOCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "DAOJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GIV3_AVATAR_NFT",
      "outputs": [
        {
          "internalType": "contract Giv3AvatarNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIV3_NFT_FACTORY",
      "outputs": [
        {
          "internalType": "contract Giv3NFTFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIV3_TREASURY_FACTORY",
      "outputs": [
        {
          "internalType": "contract Giv3TreasuryFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "createDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daoIds",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_donationAmount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPowerLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "hasJoinedDAO",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "joinDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Giv3AvatarNFT",
          "name": "_giv3AvatarNFT",
          "type": "address"
        }
      ],
      "name": "setGiv3AvatarNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Giv3NFTFactory",
          "name": "_giv3NFTFactory",
          "type": "address"
        }
      ],
      "name": "setGiv3NFTFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Giv3TreasuryFactory",
          "name": "_giv3TreasuryFactory",
          "type": "address"
        }
      ],
      "name": "setGiv3TreasuryFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "treasuryIds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa00e62372f16a5fd757e8954133bf1452c55a4ab168aef855c315f3fc3c0ede1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1085771",
    "logsBloom": "0x
    "blockHash": "0x833a524b150774ca83f9d1771c572cbcc5d46c8429ffa4423e92d3c913fbaccc",
    "transactionHash": "0xa00e62372f16a5fd757e8954133bf1452c55a4ab168aef855c315f3fc3c0ede1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xa00e62372f16a5fd757e8954133bf1452c55a4ab168aef855c315f3fc3c0ede1",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x833a524b150774ca83f9d1771c572cbcc5d46c8429ffa4423e92d3c913fbaccc"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1085771",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "40a8194097e86e97670a4fd9003e02c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IImageStorage\",\"name\":\"staticImageStorage\",\"type\":\"address\"},{\"internalType\":\"contract IImageStorage\",\"name\":\"dynamicImageStorage\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"}],\"name\":\"DAOCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"DAOJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIV3_AVATAR_NFT\",\"outputs\":[{\"internalType\":\"contract Giv3AvatarNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIV3_NFT_FACTORY\",\"outputs\":[{\"internalType\":\"contract Giv3NFTFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIV3_TREASURY_FACTORY\",\"outputs\":[{\"internalType\":\"contract Giv3TreasuryFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daoIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_donationAmount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPowerLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"hasJoinedDAO\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"joinDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Giv3AvatarNFT\",\"name\":\"_giv3AvatarNFT\",\"type\":\"address\"}],\"name\":\"setGiv3AvatarNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Giv3NFTFactory\",\"name\":\"_giv3NFTFactory\",\"type\":\"address\"}],\"name\":\"setGiv3NFTFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Giv3TreasuryFactory\",\"name\":\"_giv3TreasuryFactory\",\"type\":\"address\"}],\"name\":\"setGiv3TreasuryFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treasuryIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createDAO(string,string,string)\":{\"details\":\"Include a offchain signer to verify if the structure of the datafile is correct\",\"params\":{\"description\":\"Description of the DAO\",\"name\":\"The name of the DAO.\",\"symbol\":\"The symbol of the DAO.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDAO(string,string,string)\":{\"notice\":\"Create a new DAO.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Giv3Core.sol\":\"Giv3Core\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf82090d06cc06c498ae5847e389e1fe8cef231e9cf19f81fee476cf581e4519d\",\"license\":\"MIT\"},\"contracts/Giv3AvatarNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\n\\r\\ncontract Giv3AvatarNFT is ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct CompoundImageData {\\r\\n        uint256 layer_1_index;\\r\\n        uint256 layer_2_index;\\r\\n        uint256 layer_3_index;\\r\\n        uint256 layer_4_index;\\r\\n        uint256 layer_5_index;\\r\\n    }\\r\\n\\r\\n    IImageStorage public DYNAMIC_IMAGE_STORAGE;\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    string[] private z = [\\r\\n        '<svg width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 560 560\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\r\\n        '\\\"<image width=\\\"560\\\" height=\\\"560\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"', // add base\\r\\n        '\\\"/> <image width=\\\"560\\\" height=\\\"560\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"', // add shoes\\r\\n        '\\\"/> <image width=\\\"560\\\" height=\\\"560\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"', // add clothes\\r\\n        '\\\"/> <image width=\\\"560\\\" height=\\\"560\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"', // add necklace\\r\\n        '\\\"/> <image width=\\\"560\\\" height=\\\"560\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"', // add specs\\r\\n        '\\\"/> <image width=\\\"560\\\" height=\\\"560\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"', // add hat\\r\\n        '\\\"/> </svg>'\\r\\n    ];\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    mapping(address => uint256) public tokenMapping;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        IGiv3Core _giv3Core,\\r\\n        IImageStorage _imageStorage\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        DYNAMIC_IMAGE_STORAGE = _imageStorage;\\r\\n    }\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to) external onlyGiv3 {\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        tokenMapping[tx.origin] = _currentIndex;\\r\\n        _currentIndex++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    function genPNG(\\r\\n        uint256 power_1,\\r\\n        uint256 power_2,\\r\\n        uint256 power_3,\\r\\n        uint256 power_4,\\r\\n        uint256 power_5\\r\\n    ) internal view returns (string memory) {\\r\\n        // Get Image Levels\\r\\n        string memory base = DYNAMIC_IMAGE_STORAGE.getBody();\\r\\n        string memory layer_1 = DYNAMIC_IMAGE_STORAGE.getLayer1(power_1);\\r\\n        string memory layer_2 = DYNAMIC_IMAGE_STORAGE.getLayer2(power_2);\\r\\n        string memory layer_3 = DYNAMIC_IMAGE_STORAGE.getLayer3(power_3);\\r\\n        string memory layer_4 = DYNAMIC_IMAGE_STORAGE.getLayer4(power_4);\\r\\n        string memory layer_5 = DYNAMIC_IMAGE_STORAGE.getLayer5(power_5);\\r\\n\\r\\n        // Get Image Data\\r\\n        string memory output = string(abi.encodePacked(z[0], z[1], base, z[2]));\\r\\n        output = string(abi.encodePacked(output, layer_1, z[3]));\\r\\n        output = string(abi.encodePacked(output, layer_2, z[4], layer_3, z[5]));\\r\\n        output = string(abi.encodePacked(output, layer_4, z[6], layer_5, z[7]));\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"TokenID does not exist\\\");\\r\\n\\r\\n        uint256 _power_1 = GIV3_CORE.getPowerLevels(0, tokenId);\\r\\n        uint256 _power_2 = GIV3_CORE.getPowerLevels(1, tokenId);\\r\\n        uint256 _power_3 = GIV3_CORE.getPowerLevels(2, tokenId);\\r\\n        uint256 _power_4 = GIV3_CORE.getPowerLevels(3, tokenId);\\r\\n        uint256 _power_5 = GIV3_CORE.getPowerLevels(4, tokenId);\\r\\n\\r\\n        string memory json = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"name\\\": \\\"',\\r\\n                name(),\\r\\n                \\\"# \\\",\\r\\n                tokenId.toString(),\\r\\n                '\\\",'\\r\\n            )\\r\\n        );\\r\\n        json = string(abi.encodePacked(json, '\\\"description\\\": \\\"Giv3 NFT!\\\",'));\\r\\n        // hat, specs , necklace, clothes, shoes\\r\\n        json = string(\\r\\n            abi.encodePacked(\\r\\n                json,\\r\\n                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Hat\\\", \\\"value\\\": \\\"',\\r\\n                _power_5.toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Specs\\\", \\\"value\\\": \\\"',\\r\\n                _power_4.toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Necklace\\\", \\\"value\\\": \\\"',\\r\\n                _power_3.toString(),\\r\\n                '\\\"},',\\r\\n                '{\\\"trait_type\\\": \\\"Clothes\\\", \\\"value\\\": \\\"',\\r\\n                _power_2.toString(),\\r\\n                '\\\"}',\\r\\n                '{\\\"trait_type\\\": \\\"Shoes\\\", \\\"value\\\": \\\"',\\r\\n                _power_1.toString(),\\r\\n                '\\\"}],'\\r\\n            )\\r\\n        );\\r\\n        json = Base64.encode(\\r\\n            bytes(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        json,\\r\\n                        '\\\"image_data\\\": \\\"data:image/svg+xml;base64,',\\r\\n                        Base64.encode(\\r\\n                            bytes(\\r\\n                                genPNG(\\r\\n                                    _power_1,\\r\\n                                    _power_2,\\r\\n                                    _power_3,\\r\\n                                    _power_4,\\r\\n                                    _power_5\\r\\n                                )\\r\\n                            )\\r\\n                        ),\\r\\n                        '\\\"}'\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa6b72ac890c6e6ebce59aff326e50b02feb2a2c3303a44168a0b733be45ffcc0\",\"license\":\"MIT\"},\"contracts/Giv3Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\nimport \\\"./Giv3NFTFactory.sol\\\";\\r\\nimport \\\"./Giv3TreasuryFactory.sol\\\";\\r\\nimport \\\"./Giv3AvatarNFT.sol\\\";\\r\\n\\r\\n// import ownable from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Giv3Core is IGiv3Core, Ownable {\\r\\n    Giv3NFTFactory public GIV3_NFT_FACTORY;\\r\\n    Giv3TreasuryFactory public GIV3_TREASURY_FACTORY;\\r\\n    Giv3AvatarNFT public GIV3_AVATAR_NFT;\\r\\n    IERC20 public USDT;\\r\\n\\r\\n    struct DAO {\\r\\n        address contractAddress;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => DAO) public daoIds;\\r\\n    mapping(uint256 => address) public treasuryIds;\\r\\n\\r\\n    uint256 public daoCounter;\\r\\n\\r\\n    event DAOCreated(string name, string symbol, address dao);\\r\\n    event DAOJoined(address indexed member, uint256 indexed _id);\\r\\n\\r\\n    constructor(\\r\\n        IImageStorage staticImageStorage,\\r\\n        IImageStorage dynamicImageStorage,\\r\\n        IERC20 _usdt\\r\\n    ) {\\r\\n        USDT = _usdt;\\r\\n    }\\r\\n\\r\\n    function setGiv3NFTFactory(Giv3NFTFactory _giv3NFTFactory)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        GIV3_NFT_FACTORY = _giv3NFTFactory;\\r\\n    }\\r\\n\\r\\n    function setGiv3TreasuryFactory(Giv3TreasuryFactory _giv3TreasuryFactory)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        GIV3_TREASURY_FACTORY = _giv3TreasuryFactory;\\r\\n    }\\r\\n\\r\\n    function setGiv3AvatarNFT(Giv3AvatarNFT _giv3AvatarNFT) public onlyOwner {\\r\\n        GIV3_AVATAR_NFT = _giv3AvatarNFT;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new DAO.\\r\\n     * @param name The name of the DAO.\\r\\n     * @param symbol The symbol of the DAO.\\r\\n     * @param description Description of the DAO\\r\\n     * @dev Include a offchain signer to verify if the structure of the datafile is correct\\r\\n     */\\r\\n    function createDAO(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        Giv3NFT giv3NFT = GIV3_NFT_FACTORY.createCollection(name, symbol);\\r\\n        Giv3Treasury giv3Treasury = GIV3_TREASURY_FACTORY.createTreasury(name);\\r\\n\\r\\n        daoIds[daoCounter] = DAO(address(giv3NFT), description);\\r\\n        treasuryIds[daoCounter] = address(giv3Treasury);\\r\\n        daoCounter++;\\r\\n        emit DAOCreated(name, symbol, address(giv3NFT));\\r\\n    }\\r\\n\\r\\n    function joinDAO(uint256 _id) public {\\r\\n        require(\\r\\n            GIV3_NFT_FACTORY.getCollection(_id).balanceOf(msg.sender) == 0,\\r\\n            \\\"User already minted\\\"\\r\\n        );\\r\\n\\r\\n        // Mint GIV3Avatar NFT for user if not already exists\\r\\n        if (GIV3_AVATAR_NFT.balanceOf(msg.sender) == 0) {\\r\\n            GIV3_AVATAR_NFT.mint(msg.sender);\\r\\n        }\\r\\n\\r\\n        GIV3_NFT_FACTORY.getCollection(_id).mint(msg.sender);\\r\\n\\r\\n        emit DAOJoined(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n    function donate(uint256 daoId, uint256 _donationAmount) public {\\r\\n        // Transfer USDT to sub-DAO Treasury\\r\\n        address _treasuryAddress = address(\\r\\n            GIV3_TREASURY_FACTORY.getTreasury(daoId)\\r\\n        );\\r\\n\\r\\n        USDT.transferFrom(msg.sender, _treasuryAddress, _donationAmount);\\r\\n\\r\\n        // Update Donated amount onto user's subDAO NFT\\r\\n        GIV3_NFT_FACTORY.getCollection(daoId).addDonation(_donationAmount);\\r\\n    }\\r\\n\\r\\n    function getContract(uint256 _id) public view returns (address) {\\r\\n        return daoIds[_id].contractAddress;\\r\\n    }\\r\\n\\r\\n    function getPowerLevels(uint256 _id, uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return GIV3_NFT_FACTORY.getCollection(_id).getPowerLevel(_tokenId);\\r\\n    }\\r\\n\\r\\n    function hasJoinedDAO(uint256 _id) public view returns (bool) {\\r\\n        return GIV3_NFT_FACTORY.getCollection(_id).balanceOf(msg.sender) > 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x130effee29ed2dba650e45ff7e79ad6fbe1db1e3f3a40085d751fce1152e850d\",\"license\":\"MIT\"},\"contracts/Giv3NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\n\\r\\ncontract Giv3NFT is ERC721, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Store data about the contributions made by a user holding the token\\r\\n    struct Contribution {\\r\\n        string ipfsHash;\\r\\n        uint256 upvotes;\\r\\n        uint256 downvotes;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Contribution[]) contributions;\\r\\n    mapping(uint256 => uint256) donations;\\r\\n    mapping(uint256 => uint256) experience;\\r\\n    mapping(uint256 => uint256) energy;\\r\\n    mapping(uint256 => uint256) mintedTime;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    IImageStorage public IMAGE_STORAGE;\\r\\n    string public baseURI;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    // Weight Multipliers for the different types of contributions\\r\\n    uint256[3] public mul = [1, 1, 1];\\r\\n\\r\\n    uint256 public collectionIndex;\\r\\n\\r\\n    mapping(address => uint256) public tokenMapping;\\r\\n\\r\\n    event DonationAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event ExperienceAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event EnergyAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        IGiv3Core _giv3Core,\\r\\n        uint256 _collectionIndex,\\r\\n        IImageStorage _imageStorageAddress // ImageStorageStatic Address\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        IMAGE_STORAGE = _imageStorageAddress;\\r\\n        collectionIndex = _collectionIndex;\\r\\n    }\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to)\\r\\n        external\\r\\n        onlyGiv3\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            balanceOf(tx.origin) == 0,\\r\\n            \\\"Cannot mint more than one token at a time\\\"\\r\\n        );\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        mintedTime[_currentIndex] = block.timestamp;\\r\\n        tokenMapping[tx.origin] = _currentIndex;\\r\\n        _currentIndex++;\\r\\n        return _currentIndex - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Donation balance.\\r\\n     */\\r\\n    function addDonation(uint256 amount) external onlyGiv3 {\\r\\n        uint256 tokenId = tokenMapping[tx.origin];\\r\\n\\r\\n        donations[tokenId] += amount;\\r\\n        emit DonationAdded(tx.origin, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Experience balance.\\r\\n     */\\r\\n    function addExperience(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        experience[tokenId] += amount;\\r\\n        emit ExperienceAdded(tx.origin, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Energy balance.\\r\\n     */\\r\\n    function addEnergy(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        energy[tokenId] += amount;\\r\\n        emit EnergyAdded(tx.origin, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     * @dev gets baseURI from contract state variable\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return buildMetadata(tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the metadata required in accordance ot Opensea requirements\\r\\n    /// @param _tokenId Policy ID which will also be the NFT token ID\\r\\n    /// @dev Can change public to internal\\r\\n    function buildMetadata(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 _powerlevel = getPowerLevel(_tokenId);\\r\\n\\r\\n        uint256 _powerIndex;\\r\\n        if (_powerlevel > 0) {\\r\\n            _powerIndex = 0;\\r\\n        } else if (_powerlevel >= 100) {\\r\\n            _powerIndex = 1;\\r\\n        } else if (_powerlevel >= 1000000) {\\r\\n            _powerIndex = 2;\\r\\n        }\\r\\n\\r\\n        string memory image;\\r\\n        // NFTS that level up based on the governance score of the token.\\r\\n        // Get Image from Image Storage Contract\\r\\n        image = IMAGE_STORAGE.getImageForCollection(\\r\\n            collectionIndex,\\r\\n            _powerIndex\\r\\n        );\\r\\n        bytes memory m1 = abi.encodePacked(\\r\\n            '{\\\"name\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"description\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            image,\\r\\n            // adding policyHolder\\r\\n            '\\\", \\\"attributes\\\": [{\\\"trait_type\\\":\\\"Power Level\\\",',\\r\\n            '\\\"value\\\":\\\"',\\r\\n            Strings.toString(_powerlevel),\\r\\n            '\\\"}]}'\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(bytes.concat(m1))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getDonationScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return donations[tokenId];\\r\\n    }\\r\\n\\r\\n    function getExperienceScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return experience[tokenId];\\r\\n    }\\r\\n\\r\\n    function getEnergyScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return energy[tokenId];\\r\\n    }\\r\\n\\r\\n    /// @dev get power level of msg sender\\r\\n    function getPowerLevel(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _powerLevel)\\r\\n    {\\r\\n        if (!_exists(_tokenId)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 _donationScore = getDonationScore(_tokenId) / 10**18;\\r\\n        uint256 _experienceScore = getExperienceScore(_tokenId);\\r\\n        uint256 _energyScore = getEnergyScore(_tokenId);\\r\\n\\r\\n        _powerLevel =\\r\\n            mul[0] *\\r\\n            _donationScore +\\r\\n            mul[1] *\\r\\n            _experienceScore +\\r\\n            mul[2] *\\r\\n            _energyScore;\\r\\n\\r\\n        return _powerLevel;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b13d0ffc01d79bc07b983c4922980e3083b6f400371ff7e994909a73e60b3e5\",\"license\":\"MIT\"},\"contracts/Giv3NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./Giv3NFT.sol\\\";\\r\\n\\r\\ncontract Giv3NFTFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => Giv3NFT) collections;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    IImageStorage public STATIC_IMAGE_STORAGE;\\r\\n    IImageStorage public DYNAMIC_IMAGE_STORAGE;\\r\\n\\r\\n    event CollectionCreated(uint256 id, address collection);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IGiv3Core _giv3Core,\\r\\n        IImageStorage _staticImageStorage,\\r\\n        IImageStorage _dynamicImageStorage\\r\\n    ) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        STATIC_IMAGE_STORAGE = _staticImageStorage;\\r\\n        DYNAMIC_IMAGE_STORAGE = _dynamicImageStorage;\\r\\n    }\\r\\n\\r\\n    function createCollection(string memory name, string memory symbol)\\r\\n        public\\r\\n        onlyGiv3\\r\\n        returns (Giv3NFT)\\r\\n    {\\r\\n        Giv3NFT giv3Address = new Giv3NFT(\\r\\n            name,\\r\\n            symbol,\\r\\n            GIV3_CORE,\\r\\n            collectionsCounter,\\r\\n            STATIC_IMAGE_STORAGE\\r\\n        );\\r\\n\\r\\n        collections[collectionsCounter] = giv3Address;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        return giv3Address;\\r\\n        // emit CollectionCreated()\\r\\n    }\\r\\n\\r\\n    function getCollection(uint256 id) public view returns (Giv3NFT) {\\r\\n        return collections[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e5ffe6b3fde7c043589d22c5c3e297a5930b076897389102dc49059dfbd4037\",\"license\":\"MIT\"},\"contracts/Giv3Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// import erc20\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\n\\r\\ncontract Giv3Treasury {\\r\\n    uint256 public ethBalance;\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    mapping(address => uint256) public tokenBalances;\\r\\n\\r\\n    event ETHDeposited(uint256 amount);\\r\\n    event ETHWithdrawn(uint256 amount, address to);\\r\\n    event TokenDeposited(IERC20 tokenAddress, uint256 amount);\\r\\n    event TokenWithdrawn(IERC20 tokenAddress, uint256 amount, address to);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(string memory _name, IGiv3Core _giv3Core) {\\r\\n        name = _name;\\r\\n        GIV3_CORE = _giv3Core;\\r\\n    }\\r\\n\\r\\n    function depositETH() public payable onlyGiv3 {\\r\\n        ethBalance += msg.value;\\r\\n        uint256 amount = msg.value;\\r\\n        emit ETHDeposited(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawETH(address to, uint256 amount) public payable onlyGiv3 {\\r\\n        require(amount <= ethBalance, \\\"Not enough ETH\\\");\\r\\n        ethBalance -= amount;\\r\\n        to.call{value: amount}(\\\"\\\");\\r\\n        emit ETHWithdrawn(amount, to);\\r\\n    }\\r\\n\\r\\n    function depositToken(IERC20 tokenAddress, uint256 amount) public onlyGiv3 {\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        tokenAddress.transfer(msg.sender, amount);\\r\\n        emit TokenDeposited(tokenAddress, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(\\r\\n        IERC20 tokenAddress,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) public onlyGiv3 {\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(\\r\\n            tokenAddress.balanceOf(msg.sender) >= amount,\\r\\n            \\\"Not enough tokens\\\"\\r\\n        );\\r\\n        tokenAddress.transfer(to, amount);\\r\\n        emit TokenWithdrawn(tokenAddress, amount, to);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xba087d8c8cb95f99d34358d3c7316c29acb536bb9e11e681b1137f9a2d57b99a\",\"license\":\"MIT\"},\"contracts/Giv3TreasuryFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./Giv3Treasury.sol\\\";\\r\\n\\r\\ncontract Giv3TreasuryFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => Giv3Treasury) treasuries;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n\\r\\n    event TreasuryCreated(uint256 id, string name);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(IGiv3Core _giv3Core) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n    }\\r\\n\\r\\n    function createTreasury(string memory name)\\r\\n        public\\r\\n        onlyGiv3\\r\\n        returns (Giv3Treasury)\\r\\n    {\\r\\n        Giv3Treasury giv3Treasury = new Giv3Treasury(name, GIV3_CORE);\\r\\n\\r\\n        treasuries[collectionsCounter] = giv3Treasury;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        emit TreasuryCreated(collectionsCounter - 1, name);\\r\\n        return giv3Treasury;\\r\\n    }\\r\\n\\r\\n    function getTreasury(uint256 id) public view returns (Giv3Treasury) {\\r\\n        return treasuries[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb77d7d08bc7b2120a4ef0ffd7e70551008b61690f1ff5fb69bf25c0ae9b0a4e3\",\"license\":\"MIT\"},\"contracts/interface/IGiv3Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IGiv3Core {\\r\\n    function createDAO(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory metadataHash\\r\\n    ) external;\\r\\n\\r\\n    function joinDAO(uint256 _id) external;\\r\\n\\r\\n    function getContract(uint256 _id) external view returns (address);\\r\\n\\r\\n    function getPowerLevels(uint256 _id, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x1e07e20fa5b3e2f9d701e1edc4c18b508856d0447e36104d49b9a57bed626237\",\"license\":\"MIT\"},\"contracts/interface/IImageStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IImageStorage {\\r\\n    function getBody() external view returns (string memory);\\r\\n\\r\\n    function getLayer1(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer2(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer3(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer4(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer5(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getImageForCollection(uint256 collectionIndex, uint256 imageIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x52d05ec6c522913daa9030d1bb71ce9873dae3355edaaa6f739acdcc5e4299e9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012f4380380620012f48339810160408190526200003491620000d1565b6200003f3362000068565b600480546001600160a01b0319166001600160a01b039290921691909117905550620001259050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000ce57600080fd5b50565b600080600060608486031215620000e757600080fd5b8351620000f481620000b8565b60208501519093506200010781620000b8565b60408501519092506200011a81620000b8565b809150509250925092565b6111bf80620001356000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d977aa9a11610071578063d977aa9a1461027c578063f2924ae71461028f578063f2fde38b146102b2578063f5c8d232146102c5578063f80efd28146102e657600080fd5b80638da5cb5b14610209578063c54e44eb1461021a578063c5594ef31461022d578063c5cc085814610240578063cfb83a8d1461026957600080fd5b80633fbdf32c116100f45780633fbdf32c1461019f57806347dc3621146101b25780636b1b2e0f146101c55780636ebc8c86146101d8578063715018a61461020157600080fd5b80630cdd53f61461012657806318cd29891461013b5780632bfc1eb31461016b5780632d506fe11461017e575b600080fd5b610139610134366004610e3d565b6102ef565b005b60015461014e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610139610179366004610e74565b6104b3565b61019161018c366004610e3d565b6104dd565b604051908152602001610162565b6101396101ad366004610e91565b6105c0565b6101396101c0366004610e74565b6108b7565b60025461014e906001600160a01b031681565b61014e6101e6366004610e91565b6000908152600560205260409020546001600160a01b031690565b6101396108e1565b6000546001600160a01b031661014e565b60045461014e906001600160a01b031681565b60035461014e906001600160a01b031681565b61014e61024e366004610e91565b6006602052600090815260409020546001600160a01b031681565b610139610277366004610f4d565b6108f5565b61013961028a366004610e74565b610ac5565b6102a261029d366004610e91565b610aef565b6040519015158152602001610162565b6101396102c0366004610e74565b610bd2565b6102d86102d3366004610e91565b610c4b565b604051610162929190611022565b61019160075481565b6002546040516302b734a560e61b8152600481018490526000916001600160a01b03169063adcd294090602401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d919061104e565b600480546040516323b872dd60e01b815233928101929092526001600160a01b0380841660248401526044830186905292935091909116906323b872dd906064016020604051808303816000875af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061106b565b50600154604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f919061104e565b6001600160a01b031663d8251a14836040518263ffffffff1660e01b815260040161047c91815260200190565b600060405180830381600087803b15801561049657600080fd5b505af11580156104aa573d6000803e3d6000fd5b50505050505050565b6104bb610cfa565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051630b43e78560e31b8152600481018490526000916001600160a01b031690635a1f3c2890602401602060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b919061104e565b6001600160a01b031663d2e59bfe836040518263ffffffff1660e01b815260040161057891815260200190565b602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061108d565b9392505050565b600154604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d919061104e565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610697919061108d565b156106df5760405162461bcd60e51b8152602060048201526013602482015272155cd95c88185b1c9958591e481b5a5b9d1959606a1b60448201526064015b60405180910390fd5b6003546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b919061108d565b6107ad576003546040516335313c2160e11b81523360048201526001600160a01b0390911690636a62784290602401600060405180830381600087803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b505050505b600154604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061104e565b6040516335313c2160e11b81523360048201526001600160a01b039190911690636a627842906024016020604051808303816000875af1158015610862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610886919061108d565b50604051819033907fc6fe9b78def1629047bd69918cbc1ef87aeefe1543a67e54cb8fcd50711ec6ce90600090a350565b6108bf610cfa565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6108e9610cfa565b6108f36000610d54565b565b60015460405163176b9b7560e01b81526000916001600160a01b03169063176b9b759061092890879087906004016110a6565b6020604051808303816000875af1158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b919061104e565b600254604051634749180960e11b81529192506000916001600160a01b0390911690638e923012906109a19088906004016110d4565b6020604051808303816000875af11580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e4919061104e565b6040805180820182526001600160a01b038581168252602080830188815260075460009081526005835294909420835181546001600160a01b03191693169290921782559251805194955091939092610a44926001850192910190610da4565b505060078054600090815260066020526040812080546001600160a01b0319166001600160a01b03861617905581549250610a7e836110e7565b91905055507f6d8073b3c5d7e3a29e9539222aa4da4b3728f3e94edcef7840a1fc244e51deaf858584604051610ab693929190611110565b60405180910390a15050505050565b610acd610cfa565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051630b43e78560e31b81526004810183905260009182916001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b61919061104e565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb919061108d565b1192915050565b610bda610cfa565b6001600160a01b038116610c3f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d6565b610c4881610d54565b50565b600560205260009081526040902080546001820180546001600160a01b039092169291610c779061114e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca39061114e565b8015610cf05780601f10610cc557610100808354040283529160200191610cf0565b820191906000526020600020905b815481529060010190602001808311610cd357829003601f168201915b5050505050905082565b6000546001600160a01b031633146108f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054610db09061114e565b90600052602060002090601f016020900481019282610dd25760008555610e18565b82601f10610deb57805160ff1916838001178555610e18565b82800160010185558215610e18579182015b82811115610e18578251825591602001919060010190610dfd565b50610e24929150610e28565b5090565b5b80821115610e245760008155600101610e29565b60008060408385031215610e5057600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c4857600080fd5b600060208284031215610e8657600080fd5b81356105b981610e5f565b600060208284031215610ea357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ed157600080fd5b813567ffffffffffffffff80821115610eec57610eec610eaa565b604051601f8301601f19908116603f01168101908282118183101715610f1457610f14610eaa565b81604052838152866020858801011115610f2d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610f6257600080fd5b833567ffffffffffffffff80821115610f7a57600080fd5b610f8687838801610ec0565b94506020860135915080821115610f9c57600080fd5b610fa887838801610ec0565b93506040860135915080821115610fbe57600080fd5b50610fcb86828701610ec0565b9150509250925092565b6000815180845260005b81811015610ffb57602081850181015186830182015201610fdf565b8181111561100d576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061104690830184610fd5565b949350505050565b60006020828403121561106057600080fd5b81516105b981610e5f565b60006020828403121561107d57600080fd5b815180151581146105b957600080fd5b60006020828403121561109f57600080fd5b5051919050565b6040815260006110b96040830185610fd5565b82810360208401526110cb8185610fd5565b95945050505050565b6020815260006105b96020830184610fd5565b600060001982141561110957634e487b7160e01b600052601160045260246000fd5b5060010190565b6060815260006111236060830186610fd5565b82810360208401526111358186610fd5565b91505060018060a01b0383166040830152949350505050565b600181811c9082168061116257607f821691505b6020821081141561118357634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122044cc426548840f6344ade660a07fcef66122a1f328ffd488c5731a111a5dd9ed64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d977aa9a11610071578063d977aa9a1461027c578063f2924ae71461028f578063f2fde38b146102b2578063f5c8d232146102c5578063f80efd28146102e657600080fd5b80638da5cb5b14610209578063c54e44eb1461021a578063c5594ef31461022d578063c5cc085814610240578063cfb83a8d1461026957600080fd5b80633fbdf32c116100f45780633fbdf32c1461019f57806347dc3621146101b25780636b1b2e0f146101c55780636ebc8c86146101d8578063715018a61461020157600080fd5b80630cdd53f61461012657806318cd29891461013b5780632bfc1eb31461016b5780632d506fe11461017e575b600080fd5b610139610134366004610e3d565b6102ef565b005b60015461014e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610139610179366004610e74565b6104b3565b61019161018c366004610e3d565b6104dd565b604051908152602001610162565b6101396101ad366004610e91565b6105c0565b6101396101c0366004610e74565b6108b7565b60025461014e906001600160a01b031681565b61014e6101e6366004610e91565b6000908152600560205260409020546001600160a01b031690565b6101396108e1565b6000546001600160a01b031661014e565b60045461014e906001600160a01b031681565b60035461014e906001600160a01b031681565b61014e61024e366004610e91565b6006602052600090815260409020546001600160a01b031681565b610139610277366004610f4d565b6108f5565b61013961028a366004610e74565b610ac5565b6102a261029d366004610e91565b610aef565b6040519015158152602001610162565b6101396102c0366004610e74565b610bd2565b6102d86102d3366004610e91565b610c4b565b604051610162929190611022565b61019160075481565b6002546040516302b734a560e61b8152600481018490526000916001600160a01b03169063adcd294090602401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d919061104e565b600480546040516323b872dd60e01b815233928101929092526001600160a01b0380841660248401526044830186905292935091909116906323b872dd906064016020604051808303816000875af11580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061106b565b50600154604051630b43e78560e31b8152600481018590526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f919061104e565b6001600160a01b031663d8251a14836040518263ffffffff1660e01b815260040161047c91815260200190565b600060405180830381600087803b15801561049657600080fd5b505af11580156104aa573d6000803e3d6000fd5b50505050505050565b6104bb610cfa565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051630b43e78560e31b8152600481018490526000916001600160a01b031690635a1f3c2890602401602060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b919061104e565b6001600160a01b031663d2e59bfe836040518263ffffffff1660e01b815260040161057891815260200190565b602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061108d565b9392505050565b600154604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d919061104e565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610697919061108d565b156106df5760405162461bcd60e51b8152602060048201526013602482015272155cd95c88185b1c9958591e481b5a5b9d1959606a1b60448201526064015b60405180910390fd5b6003546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b919061108d565b6107ad576003546040516335313c2160e11b81523360048201526001600160a01b0390911690636a62784290602401600060405180830381600087803b15801561079457600080fd5b505af11580156107a8573d6000803e3d6000fd5b505050505b600154604051630b43e78560e31b8152600481018390526001600160a01b0390911690635a1f3c2890602401602060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061104e565b6040516335313c2160e11b81523360048201526001600160a01b039190911690636a627842906024016020604051808303816000875af1158015610862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610886919061108d565b50604051819033907fc6fe9b78def1629047bd69918cbc1ef87aeefe1543a67e54cb8fcd50711ec6ce90600090a350565b6108bf610cfa565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6108e9610cfa565b6108f36000610d54565b565b60015460405163176b9b7560e01b81526000916001600160a01b03169063176b9b759061092890879087906004016110a6565b6020604051808303816000875af1158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b919061104e565b600254604051634749180960e11b81529192506000916001600160a01b0390911690638e923012906109a19088906004016110d4565b6020604051808303816000875af11580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e4919061104e565b6040805180820182526001600160a01b038581168252602080830188815260075460009081526005835294909420835181546001600160a01b03191693169290921782559251805194955091939092610a44926001850192910190610da4565b505060078054600090815260066020526040812080546001600160a01b0319166001600160a01b03861617905581549250610a7e836110e7565b91905055507f6d8073b3c5d7e3a29e9539222aa4da4b3728f3e94edcef7840a1fc244e51deaf858584604051610ab693929190611110565b60405180910390a15050505050565b610acd610cfa565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600154604051630b43e78560e31b81526004810183905260009182916001600160a01b0390911690635a1f3c2890602401602060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b61919061104e565b6040516370a0823160e01b81523360048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb919061108d565b1192915050565b610bda610cfa565b6001600160a01b038116610c3f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d6565b610c4881610d54565b50565b600560205260009081526040902080546001820180546001600160a01b039092169291610c779061114e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca39061114e565b8015610cf05780601f10610cc557610100808354040283529160200191610cf0565b820191906000526020600020905b815481529060010190602001808311610cd357829003601f168201915b5050505050905082565b6000546001600160a01b031633146108f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054610db09061114e565b90600052602060002090601f016020900481019282610dd25760008555610e18565b82601f10610deb57805160ff1916838001178555610e18565b82800160010185558215610e18579182015b82811115610e18578251825591602001919060010190610dfd565b50610e24929150610e28565b5090565b5b80821115610e245760008155600101610e29565b60008060408385031215610e5057600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c4857600080fd5b600060208284031215610e8657600080fd5b81356105b981610e5f565b600060208284031215610ea357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ed157600080fd5b813567ffffffffffffffff80821115610eec57610eec610eaa565b604051601f8301601f19908116603f01168101908282118183101715610f1457610f14610eaa565b81604052838152866020858801011115610f2d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610f6257600080fd5b833567ffffffffffffffff80821115610f7a57600080fd5b610f8687838801610ec0565b94506020860135915080821115610f9c57600080fd5b610fa887838801610ec0565b93506040860135915080821115610fbe57600080fd5b50610fcb86828701610ec0565b9150509250925092565b6000815180845260005b81811015610ffb57602081850181015186830182015201610fdf565b8181111561100d576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061104690830184610fd5565b949350505050565b60006020828403121561106057600080fd5b81516105b981610e5f565b60006020828403121561107d57600080fd5b815180151581146105b957600080fd5b60006020828403121561109f57600080fd5b5051919050565b6040815260006110b96040830185610fd5565b82810360208401526110cb8185610fd5565b95945050505050565b6020815260006105b96020830184610fd5565b600060001982141561110957634e487b7160e01b600052601160045260246000fd5b5060010190565b6060815260006111236060830186610fd5565b82810360208401526111358186610fd5565b91505060018060a01b0383166040830152949350505050565b600181811c9082168061116257607f821691505b6020821081141561118357634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122044cc426548840f6344ade660a07fcef66122a1f328ffd488c5731a111a5dd9ed64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createDAO(string,string,string)": {
        "details": "Include a offchain signer to verify if the structure of the datafile is correct",
        "params": {
          "description": "Description of the DAO",
          "name": "The name of the DAO.",
          "symbol": "The symbol of the DAO."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDAO(string,string,string)": {
        "notice": "Create a new DAO."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2942,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "GIV3_NFT_FACTORY",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Giv3NFTFactory)3900"
      },
      {
        "astId": 2945,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "GIV3_TREASURY_FACTORY",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Giv3TreasuryFactory)4200"
      },
      {
        "astId": 2948,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "GIV3_AVATAR_NFT",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Giv3AvatarNFT)2926"
      },
      {
        "astId": 2951,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "USDT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)816"
      },
      {
        "astId": 2961,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "daoIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(DAO)2956_storage)"
      },
      {
        "astId": 2965,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "treasuryIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2967,
        "contract": "contracts/Giv3Core.sol:Giv3Core",
        "label": "daoCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Giv3AvatarNFT)2926": {
        "encoding": "inplace",
        "label": "contract Giv3AvatarNFT",
        "numberOfBytes": "20"
      },
      "t_contract(Giv3NFTFactory)3900": {
        "encoding": "inplace",
        "label": "contract Giv3NFTFactory",
        "numberOfBytes": "20"
      },
      "t_contract(Giv3TreasuryFactory)4200": {
        "encoding": "inplace",
        "label": "contract Giv3TreasuryFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)816": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DAO)2956_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Giv3Core.DAO)",
        "numberOfBytes": "32",
        "value": "t_struct(DAO)2956_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DAO)2956_storage": {
        "encoding": "inplace",
        "label": "struct Giv3Core.DAO",
        "members": [
          {
            "astId": 2953,
            "contract": "contracts/Giv3Core.sol:Giv3Core",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2955,
            "contract": "contracts/Giv3Core.sol:Giv3Core",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}