{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGiv3Core",
          "name": "_giv3Core",
          "type": "address"
        },
        {
          "internalType": "contract IImageStorage",
          "name": "_staticImageStorage",
          "type": "address"
        },
        {
          "internalType": "contract IImageStorage",
          "name": "_dynamicImageStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DYNAMIC_IMAGE_STORAGE",
      "outputs": [
        {
          "internalType": "contract IImageStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIV3_CORE",
      "outputs": [
        {
          "internalType": "contract IGiv3Core",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATIC_IMAGE_STORAGE",
      "outputs": [
        {
          "internalType": "contract IImageStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "createCollection",
      "outputs": [
        {
          "internalType": "contract Giv3NFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "internalType": "contract Giv3NFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7393366170a2c9e0cbb4e64a8a09de4051e810d5fb6509fa53e1264323df9c0e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2323899",
    "logsBloom": "0x
    "blockHash": "0xd2d6a6574d9f82fe635a45f6b164002f6b2baa84ed5b4f5359e2e9a5b1d653ca",
    "transactionHash": "0x7393366170a2c9e0cbb4e64a8a09de4051e810d5fb6509fa53e1264323df9c0e",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2323899",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "40a8194097e86e97670a4fd9003e02c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGiv3Core\",\"name\":\"_giv3Core\",\"type\":\"address\"},{\"internalType\":\"contract IImageStorage\",\"name\":\"_staticImageStorage\",\"type\":\"address\"},{\"internalType\":\"contract IImageStorage\",\"name\":\"_dynamicImageStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DYNAMIC_IMAGE_STORAGE\",\"outputs\":[{\"internalType\":\"contract IImageStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIV3_CORE\",\"outputs\":[{\"internalType\":\"contract IGiv3Core\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATIC_IMAGE_STORAGE\",\"outputs\":[{\"internalType\":\"contract IImageStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"contract Giv3NFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCollection\",\"outputs\":[{\"internalType\":\"contract Giv3NFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Giv3NFTFactory.sol\":\"Giv3NFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf82090d06cc06c498ae5847e389e1fe8cef231e9cf19f81fee476cf581e4519d\",\"license\":\"MIT\"},\"contracts/Giv3NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\nimport \\\"./interface/IGiv3Core.sol\\\";\\r\\nimport \\\"./interface/IImageStorage.sol\\\";\\r\\n\\r\\ncontract Giv3NFT is ERC721, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Store data about the contributions made by a user holding the token\\r\\n    struct Contribution {\\r\\n        string ipfsHash;\\r\\n        uint256 upvotes;\\r\\n        uint256 downvotes;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Contribution[]) contributions;\\r\\n    mapping(uint256 => uint256) donations;\\r\\n    mapping(uint256 => uint256) experience;\\r\\n    mapping(uint256 => uint256) energy;\\r\\n    mapping(uint256 => uint256) mintedTime;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    IImageStorage public IMAGE_STORAGE;\\r\\n    string public baseURI;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint128 internal _currentIndex;\\r\\n\\r\\n    // Weight Multipliers for the different types of contributions\\r\\n    uint256[3] public mul = [1, 1, 1];\\r\\n\\r\\n    uint256 public collectionIndex;\\r\\n\\r\\n    mapping(address => uint256) public tokenMapping;\\r\\n\\r\\n    event DonationAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event ExperienceAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event EnergyAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        IGiv3Core _giv3Core,\\r\\n        uint256 _collectionIndex,\\r\\n        IImageStorage _imageStorageAddress // ImageStorageStatic Address\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        IMAGE_STORAGE = _imageStorageAddress;\\r\\n        collectionIndex = _collectionIndex;\\r\\n    }\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(address _to)\\r\\n        external\\r\\n        onlyGiv3\\r\\n        nonReentrant\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            balanceOf(tx.origin) == 0,\\r\\n            \\\"Cannot mint more than one token at a time\\\"\\r\\n        );\\r\\n        _safeMint(_to, _currentIndex);\\r\\n        mintedTime[_currentIndex] = block.timestamp;\\r\\n        tokenMapping[tx.origin] = _currentIndex;\\r\\n        _currentIndex++;\\r\\n        return _currentIndex - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Donation balance.\\r\\n     */\\r\\n    function addDonation(uint256 amount) external onlyGiv3 {\\r\\n        uint256 tokenId = tokenMapping[tx.origin];\\r\\n\\r\\n        donations[tokenId] += amount;\\r\\n        emit DonationAdded(tx.origin, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Experience balance.\\r\\n     */\\r\\n    function addExperience(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        experience[tokenId] += amount;\\r\\n        emit ExperienceAdded(tx.origin, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * R@notice Add Update Energy balance.\\r\\n     */\\r\\n    function addEnergy(uint256 amount, uint256 tokenId) external onlyGiv3 {\\r\\n        require(\\r\\n            tx.origin == ownerOf(tokenId),\\r\\n            \\\"Only the owner can add a contribution\\\"\\r\\n        );\\r\\n\\r\\n        energy[tokenId] += amount;\\r\\n        emit EnergyAdded(tx.origin, tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get Total Supply of Tokens Minted\\r\\n     * @return Current Total Supply\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     * @dev gets baseURI from contract state variable\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return buildMetadata(tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the metadata required in accordance ot Opensea requirements\\r\\n    /// @param _tokenId Policy ID which will also be the NFT token ID\\r\\n    /// @dev Can change public to internal\\r\\n    function buildMetadata(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 _powerlevel = getPowerLevel(_tokenId);\\r\\n\\r\\n        uint256 _powerIndex;\\r\\n        if (_powerlevel > 0) {\\r\\n            _powerIndex = 0;\\r\\n        } else if (_powerlevel >= 100) {\\r\\n            _powerIndex = 1;\\r\\n        } else if (_powerlevel >= 1000000) {\\r\\n            _powerIndex = 2;\\r\\n        }\\r\\n\\r\\n        string memory image;\\r\\n        // NFTS that level up based on the governance score of the token.\\r\\n        // Get Image from Image Storage Contract\\r\\n        image = IMAGE_STORAGE.getImageForCollection(\\r\\n            collectionIndex,\\r\\n            _powerIndex\\r\\n        );\\r\\n        bytes memory m1 = abi.encodePacked(\\r\\n            '{\\\"name\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"description\\\":\\\"',\\r\\n            name(),\\r\\n            \\\" Membership\\\",\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            image,\\r\\n            // adding policyHolder\\r\\n            '\\\", \\\"attributes\\\": [{\\\"trait_type\\\":\\\"Power Level\\\",',\\r\\n            '\\\"value\\\":\\\"',\\r\\n            Strings.toString(_powerlevel),\\r\\n            '\\\"}]}'\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(bytes.concat(m1))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getDonationScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return donations[tokenId];\\r\\n    }\\r\\n\\r\\n    function getExperienceScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return experience[tokenId];\\r\\n    }\\r\\n\\r\\n    function getEnergyScore(uint256 tokenId) public view returns (uint256) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return energy[tokenId];\\r\\n    }\\r\\n\\r\\n    /// @dev get power level of msg sender\\r\\n    function getPowerLevel(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _powerLevel)\\r\\n    {\\r\\n        if (!_exists(_tokenId)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 _donationScore = getDonationScore(_tokenId) / 10**18;\\r\\n        uint256 _experienceScore = getExperienceScore(_tokenId);\\r\\n        uint256 _energyScore = getEnergyScore(_tokenId);\\r\\n\\r\\n        _powerLevel =\\r\\n            mul[0] *\\r\\n            _donationScore +\\r\\n            mul[1] *\\r\\n            _experienceScore +\\r\\n            mul[2] *\\r\\n            _energyScore;\\r\\n\\r\\n        return _powerLevel;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal pure override {\\r\\n        // Prevent Future Transfer of token\\r\\n        require(from == address(0), \\\"ERC721: transfer from non-zero address\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b13d0ffc01d79bc07b983c4922980e3083b6f400371ff7e994909a73e60b3e5\",\"license\":\"MIT\"},\"contracts/Giv3NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./Giv3NFT.sol\\\";\\r\\n\\r\\ncontract Giv3NFTFactory {\\r\\n    uint256 collectionsCounter = 0;\\r\\n\\r\\n    // Map Id to collection\\r\\n    mapping(uint256 => Giv3NFT) collections;\\r\\n\\r\\n    IGiv3Core public GIV3_CORE;\\r\\n    IImageStorage public STATIC_IMAGE_STORAGE;\\r\\n    IImageStorage public DYNAMIC_IMAGE_STORAGE;\\r\\n\\r\\n    event CollectionCreated(uint256 id, address collection);\\r\\n\\r\\n    modifier onlyGiv3() {\\r\\n        require(msg.sender == address(GIV3_CORE));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IGiv3Core _giv3Core,\\r\\n        IImageStorage _staticImageStorage,\\r\\n        IImageStorage _dynamicImageStorage\\r\\n    ) {\\r\\n        GIV3_CORE = _giv3Core;\\r\\n        STATIC_IMAGE_STORAGE = _staticImageStorage;\\r\\n        DYNAMIC_IMAGE_STORAGE = _dynamicImageStorage;\\r\\n    }\\r\\n\\r\\n    function createCollection(string memory name, string memory symbol)\\r\\n        public\\r\\n        onlyGiv3\\r\\n        returns (Giv3NFT)\\r\\n    {\\r\\n        Giv3NFT giv3Address = new Giv3NFT(\\r\\n            name,\\r\\n            symbol,\\r\\n            GIV3_CORE,\\r\\n            collectionsCounter,\\r\\n            STATIC_IMAGE_STORAGE\\r\\n        );\\r\\n\\r\\n        collections[collectionsCounter] = giv3Address;\\r\\n        collectionsCounter++;\\r\\n\\r\\n        return giv3Address;\\r\\n        // emit CollectionCreated()\\r\\n    }\\r\\n\\r\\n    function getCollection(uint256 id) public view returns (Giv3NFT) {\\r\\n        return collections[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e5ffe6b3fde7c043589d22c5c3e297a5930b076897389102dc49059dfbd4037\",\"license\":\"MIT\"},\"contracts/interface/IGiv3Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IGiv3Core {\\r\\n    function createDAO(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory metadataHash\\r\\n    ) external;\\r\\n\\r\\n    function joinDAO(uint256 _id) external;\\r\\n\\r\\n    function getContract(uint256 _id) external view returns (address);\\r\\n\\r\\n    function getPowerLevels(uint256 _id, uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x1e07e20fa5b3e2f9d701e1edc4c18b508856d0447e36104d49b9a57bed626237\",\"license\":\"MIT\"},\"contracts/interface/IImageStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IImageStorage {\\r\\n    function getBody() external view returns (string memory);\\r\\n\\r\\n    function getLayer1(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer2(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer3(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer4(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getLayer5(uint256 _index) external view returns (string memory);\\r\\n\\r\\n    function getImageForCollection(uint256 collectionIndex, uint256 imageIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x52d05ec6c522913daa9030d1bb71ce9873dae3355edaaa6f739acdcc5e4299e9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b506040516128ad3803806128ad8339810160408190526100339161008d565b600280546001600160a01b039485166001600160a01b0319918216179091556003805493851693821693909317909255600480549190931691161790556100da565b6001600160a01b038116811461008a57600080fd5b50565b6000806000606084860312156100a257600080fd5b83516100ad81610075565b60208501519093506100be81610075565b60408501519092506100cf81610075565b809150509250925092565b6127c4806100e96000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063176b9b751461005c5780635a1f3c281461008b578063897a2504146100b45780638e4aa826146100c75780639518a3e9146100da575b600080fd5b61006f61006a366004610252565b6100ed565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100993660046102b6565b6000908152600160205260409020546001600160a01b031690565b60035461006f906001600160a01b031681565b60045461006f906001600160a01b031681565b60025461006f906001600160a01b031681565b6002546000906001600160a01b0316331461010757600080fd5b600254600080546003546040519293879387936001600160a01b039283169390921690610133906101a2565b61014195949392919061031c565b604051809103906000f08015801561015d573d6000803e3d6000fd5b5060008054815260016020526040812080546001600160a01b0319166001600160a01b0384161790558054919250806101958361036c565b9091555090949350505050565b6123f98061039683390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101d657600080fd5b813567ffffffffffffffff808211156101f1576101f16101af565b604051601f8301601f19908116603f01168101908282118183101715610219576102196101af565b8160405283815286602085880101111561023257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561026557600080fd5b823567ffffffffffffffff8082111561027d57600080fd5b610289868387016101c5565b9350602085013591508082111561029f57600080fd5b506102ac858286016101c5565b9150509250929050565b6000602082840312156102c857600080fd5b5035919050565b6000815180845260005b818110156102f5576020818501810151868301820152016102d9565b81811115610307576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061032f60a08301886102cf565b828103602084015261034181886102cf565b6001600160a01b03968716604085015260608401959095525050921660809092019190915292915050565b600060001982141561038e57634e487b7160e01b600052601160045260246000fd5b506001019056fe60e06040526001608081815260a082905260c09190915262000026906010906003620000c7565b503480156200003457600080fd5b50604051620023f9380380620023f9833981016040819052620000579162000289565b845185908590620000709060009060208501906200010f565b508051620000869060019060208401906200010f565b5050600160065550600c80546001600160a01b039485166001600160a01b031991821617909155600d80549290941691161790915560135550620003669050565b8260038101928215620000fd579160200282015b82811115620000fd578251829060ff16905591602001919060010190620000db565b506200010b9291506200018c565b5090565b8280546200011d9062000329565b90600052602060002090601f016020900481019282620001415760008555620000fd565b82601f106200015c57805160ff1916838001178555620000fd565b82800160010185558215620000fd579182015b82811115620000fd5782518255916020019190600101906200016f565b5b808211156200010b57600081556001016200018d565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cb57600080fd5b81516001600160401b0380821115620001e857620001e8620001a3565b604051601f8301601f19908116603f01168101908282118183101715620002135762000213620001a3565b816040528381526020925086838588010111156200023057600080fd5b600091505b8382101562000254578582018301518183018401529082019062000235565b83821115620002665760008385830101525b9695505050505050565b6001600160a01b03811681146200028657600080fd5b50565b600080600080600060a08688031215620002a257600080fd5b85516001600160401b0380821115620002ba57600080fd5b620002c889838a01620001b9565b96506020880151915080821115620002df57600080fd5b50620002ee88828901620001b9565b9450506040860151620003018162000270565b6060870151608088015191945092506200031b8162000270565b809150509295509295909350565b600181811c908216806200033e57607f821691505b602082108114156200036057634e487b7160e01b600052602260045260246000fd5b50919050565b61208380620003766000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635d240c5811610104578063a22cb465116100a2578063d2e59bfe11610071578063d2e59bfe146103d9578063d8251a14146103ec578063e985e9c5146103ff578063edf877041461043b57600080fd5b8063a22cb46514610380578063b88d4fde14610393578063ba27f50b146103a6578063c87b56dd146103c657600080fd5b80636c0360eb116100de5780636c0360eb1461034a57806370a08231146103525780639518a3e91461036557806395d89b411461037857600080fd5b80635d240c58146103115780636352211e146103245780636a6278421461033757600080fd5b806318160ddd1161017157806342842e0e1161014b57806342842e0e146102cf57806349015aac146102e257806356100e14146102f55780635be980671461030857600080fd5b806318160ddd146102985780631e8f9ffa146102a957806323b872dd146102bc57600080fd5b8063081812fc116101ad578063081812fc14610232578063095ea7b31461025d578063131e2f181461027257806317ef8ae61461028557600080fd5b806301ffc9a7146101d457806306fdde03146101fc57806307e229ae14610211575b600080fd5b6101e76101e236600461182a565b61044e565b60405190151581526020015b60405180910390f35b6102046104a0565b6040516101f391906118a6565b61022461021f3660046118b9565b610532565b6040519081526020016101f3565b6102456102403660046118b9565b610575565b6040516001600160a01b0390911681526020016101f3565b61027061026b3660046118ee565b61059c565b005b6102246102803660046118b9565b6106b2565b6102246102933660046118b9565b6106c9565b600f546001600160801b0316610224565b600d54610245906001600160a01b031681565b6102706102ca366004611918565b610703565b6102706102dd366004611918565b610734565b6102246102f03660046118b9565b61074f565b610270610303366004611954565b610789565b61022460135481565b61027061031f366004611954565b610838565b6102456103323660046118b9565b6108df565b610224610345366004611976565b61093f565b610204610ab9565b610224610360366004611976565b610b47565b600c54610245906001600160a01b031681565b610204610bcd565b61027061038e366004611991565b610bdc565b6102706103a1366004611a3c565b610beb565b6102246103b4366004611976565b60146020526000908152604090205481565b6102046103d43660046118b9565b610c23565b6102246103e73660046118b9565b610c53565b6102706103fa3660046118b9565b610cec565b6101e761040d366004611ae7565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102046104493660046118b9565b610d6a565b60006001600160e01b031982166380ac58cd60e01b148061047f57506001600160e01b03198216635b5e139f60e01b145b8061049a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104af90611b1a565b80601f01602080910402602001604051908101604052809291908181526020018280546104db90611b1a565b80156105285780601f106104fd57610100808354040283529160200191610528565b820191906000526020600020905b81548152906001019060200180831161050b57829003601f168201915b5050505050905090565b600061053d82610eb8565b6105625760405162461bcd60e51b815260040161055990611b55565b60405180910390fd5b5060009081526008602052604090205490565b600061058082610ed5565b506000908152600460205260409020546001600160a01b031690565b60006105a7826108df565b9050806001600160a01b0316836001600160a01b031614156106155760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610559565b336001600160a01b03821614806106315750610631813361040d565b6106a35760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610559565b6106ad8383610f28565b505050565b601081600381106106c257600080fd5b0154905081565b60006106d482610eb8565b6106f05760405162461bcd60e51b815260040161055990611b55565b506000908152600a602052604090205490565b61070d3382610f96565b6107295760405162461bcd60e51b815260040161055990611ba4565b6106ad838383611015565b6106ad83838360405180602001604052806000815250610beb565b600061075a82610eb8565b6107765760405162461bcd60e51b815260040161055990611b55565b5060009081526009602052604090205490565b600c546001600160a01b031633146107a057600080fd5b6107a9816108df565b6001600160a01b0316326001600160a01b0316146107d95760405162461bcd60e51b815260040161055990611bf2565b6000818152600a6020526040812080548492906107f7908490611c4d565b9091555050604051828152819032907f42e702cca92cac2a67fd87ece90cd65cdc0bdee9a7ae20dc725b73b263468af5906020015b60405180910390a35050565b600c546001600160a01b0316331461084f57600080fd5b610858816108df565b6001600160a01b0316326001600160a01b0316146108885760405162461bcd60e51b815260040161055990611bf2565b600081815260096020526040812080548492906108a6908490611c4d565b9091555050604051828152819032907f81665166aed8384c9df23393834f1b549569bbb3ca825f52f8390f1bbe1638719060200161082c565b6000818152600260205260408120546001600160a01b03168061049a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610559565b600c546000906001600160a01b0316331461095957600080fd5b600260065414156109ac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610559565b60026006556109ba32610b47565b15610a195760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206d696e74206d6f7265207468616e206f6e6520746f6b656e20604482015268617420612074696d6560b81b6064820152608401610559565b600f54610a309083906001600160801b03166111bc565b600f80546001600160801b039081166000908152600b60209081526040808320429055845432845260149092528220908316905582549091169190610a7483611c65565b82546101009290920a6001600160801b03818102199093169183160217909155600f54610aa5925060019116611c8c565b60016006556001600160801b031692915050565b600e8054610ac690611b1a565b80601f0160208091040260200160405190810160405280929190818152602001828054610af290611b1a565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b505050505081565b60006001600160a01b038216610bb15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610559565b506001600160a01b031660009081526003602052604090205490565b6060600180546104af90611b1a565b610be73383836111d6565b5050565b610bf53383610f96565b610c115760405162461bcd60e51b815260040161055990611ba4565b610c1d848484846112a5565b50505050565b6060610c2e82610eb8565b610c4a5760405162461bcd60e51b815260040161055990611b55565b61049a82610d6a565b6000610c5e82610eb8565b610c6a57506000919050565b6000670de0b6b3a7640000610c7e84610532565b610c889190611cca565b90506000610c958461074f565b90506000610ca2856106c9565b601254909150610cb3908290611cf4565b601154610cc1908490611cf4565b601054610ccf908690611cf4565b610cd99190611c4d565b610ce39190611c4d565b95945050505050565b600c546001600160a01b03163314610d0357600080fd5b3260009081526014602090815260408083205480845260089092528220805491928492610d31908490611c4d565b9091555050604051828152819032907f871d2dd633714517795b5e7c02e648de931e9a9d914f99baf5a96995e096be489060200161082c565b60606000610d7783610c53565b905060008115610d8957506000610da7565b60648210610d9957506001610da7565b620f42408210610da7575060025b600d54601354604051639518c22760e01b81526004810191909152602481018390526060916001600160a01b031690639518c22790604401600060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e249190810190611d13565b90506000610e306104a0565b610e386104a0565b83610e42876112d8565b604051602001610e559493929190611d9d565b6040516020818303038152906040529050610e8e81604051602001610e7a9190611eba565b6040516020818303038152906040526113d6565b604051602001610e9e9190611ed6565b604051602081830303815290604052945050505050919050565b6000908152600260205260409020546001600160a01b0316151590565b610ede81610eb8565b610f255760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610559565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f5d826108df565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610fa2836108df565b9050806001600160a01b0316846001600160a01b03161480610fe957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061100d5750836001600160a01b031661100284610575565b6001600160a01b0316145b949350505050565b826001600160a01b0316611028826108df565b6001600160a01b03161461108c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610559565b6001600160a01b0382166110ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610559565b6110f983838361153e565b611104600082610f28565b6001600160a01b038316600090815260036020526040812080546001929061112d908490611f1b565b90915550506001600160a01b038216600090815260036020526040812080546001929061115b908490611c4d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610be78282604051806020016040528060008152506115a4565b816001600160a01b0316836001600160a01b031614156112385760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610559565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6112b0848484611015565b6112bc848484846115d7565b610c1d5760405162461bcd60e51b815260040161055990611f32565b6060816112fc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611326578061131081611f84565b915061131f9050600a83611cca565b9150611300565b60008167ffffffffffffffff811115611341576113416119cd565b6040519080825280601f01601f19166020018201604052801561136b576020820181803683370190505b5090505b841561100d57611380600183611f1b565b915061138d600a86611f9f565b611398906030611c4d565b60f81b8183815181106113ad576113ad611cde565b60200101906001600160f81b031916908160001a9053506113cf600a86611cca565b945061136f565b60608151600014156113f657505060408051602081019091526000815290565b600060405180606001604052806040815260200161200e60409139905060006003845160026114259190611c4d565b61142f9190611cca565b61143a906004611cf4565b90506000611449826020611c4d565b67ffffffffffffffff811115611461576114616119cd565b6040519080825280601f01601f19166020018201604052801561148b576020820181803683370190505b509050818152600183018586518101602084015b818310156114f95760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161149f565b600389510660018114611513576002811461152457611530565b613d3d60f01b600119830152611530565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b038316156106ad5760405162461bcd60e51b815260206004820152602660248201527f4552433732313a207472616e736665722066726f6d206e6f6e2d7a65726f206160448201526564647265737360d01b6064820152608401610559565b6115ae83836116d5565b6115bb60008484846115d7565b6106ad5760405162461bcd60e51b815260040161055990611f32565b60006001600160a01b0384163b156116ca57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061161b903390899088908890600401611fb3565b6020604051808303816000875af1925050508015611656575060408051601f3d908101601f1916820190925261165391810190611ff0565b60015b6116b0573d808015611684576040519150601f19603f3d011682016040523d82523d6000602084013e611689565b606091505b5080516116a85760405162461bcd60e51b815260040161055990611f32565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061100d565b506001949350505050565b6001600160a01b03821661172b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610559565b61173481610eb8565b156117815760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610559565b61178d6000838361153e565b6001600160a01b03821660009081526003602052604081208054600192906117b6908490611c4d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114610f2557600080fd5b60006020828403121561183c57600080fd5b813561184781611814565b9392505050565b60005b83811015611869578181015183820152602001611851565b83811115610c1d5750506000910152565b6000815180845261189281602086016020860161184e565b601f01601f19169290920160200192915050565b602081526000611847602083018461187a565b6000602082840312156118cb57600080fd5b5035919050565b80356001600160a01b03811681146118e957600080fd5b919050565b6000806040838503121561190157600080fd5b61190a836118d2565b946020939093013593505050565b60008060006060848603121561192d57600080fd5b611936846118d2565b9250611944602085016118d2565b9150604084013590509250925092565b6000806040838503121561196757600080fd5b50508035926020909101359150565b60006020828403121561198857600080fd5b611847826118d2565b600080604083850312156119a457600080fd5b6119ad836118d2565b9150602083013580151581146119c257600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a0c57611a0c6119cd565b604052919050565b600067ffffffffffffffff821115611a2e57611a2e6119cd565b50601f01601f191660200190565b60008060008060808587031215611a5257600080fd5b611a5b856118d2565b9350611a69602086016118d2565b925060408501359150606085013567ffffffffffffffff811115611a8c57600080fd5b8501601f81018713611a9d57600080fd5b8035611ab0611aab82611a14565b6119e3565b818152886020838501011115611ac557600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611afa57600080fd5b611b03836118d2565b9150611b11602084016118d2565b90509250929050565b600181811c90821680611b2e57607f821691505b60208210811415611b4f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f4f6e6c7920746865206f776e65722063616e20616464206120636f6e747269626040820152643aba34b7b760d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611c6057611c60611c37565b500190565b60006001600160801b0380831681811415611c8257611c82611c37565b6001019392505050565b60006001600160801b0383811690831681811015611cac57611cac611c37565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600082611cd957611cd9611cb4565b500490565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611d0e57611d0e611c37565b500290565b600060208284031215611d2557600080fd5b815167ffffffffffffffff811115611d3c57600080fd5b8201601f81018413611d4d57600080fd5b8051611d5b611aab82611a14565b818152856020838501011115611d7057600080fd5b610ce382602083016020860161184e565b60008151611d9381856020860161184e565b9290920192915050565b683d913730b6b2911d1160b91b81528451600090611dc2816009850160208a0161184e565b6a0204d656d626572736869760ac1b600991840191820181905271111610113232b9b1b934b83a34b7b7111d1160711b60148301528651611e0a816026850160208b0161184e565b60269201918201526c1116101134b6b0b3b2911d101160991b60318201528451611e3b81603e84016020890161184e565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a9101603e8101919091526d08941bddd95c8813195d995b088b60921b605e82015268113b30b63ab2911d1160b91b606c820152611eaf611e9f6075830186611d81565b63227d5d7d60e01b815260040190565b979650505050505050565b60008251611ecc81846020870161184e565b9190910192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f0e81601d85016020870161184e565b91909101601d0192915050565b600082821015611f2d57611f2d611c37565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600019821415611f9857611f98611c37565b5060010190565b600082611fae57611fae611cb4565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611fe69083018461187a565b9695505050505050565b60006020828403121561200257600080fd5b81516118478161181456fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220ced7474ea0c8f8e517a0072e215b1a355dcaac70ae18d21d9c8fbc099e5bd55664736f6c634300080a0033a26469706673582212207900ad02e61c7b3e44f86e3d6650a8cef00a8372d98e9d420881919641c1ce0664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063176b9b751461005c5780635a1f3c281461008b578063897a2504146100b45780638e4aa826146100c75780639518a3e9146100da575b600080fd5b61006f61006a366004610252565b6100ed565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100993660046102b6565b6000908152600160205260409020546001600160a01b031690565b60035461006f906001600160a01b031681565b60045461006f906001600160a01b031681565b60025461006f906001600160a01b031681565b6002546000906001600160a01b0316331461010757600080fd5b600254600080546003546040519293879387936001600160a01b039283169390921690610133906101a2565b61014195949392919061031c565b604051809103906000f08015801561015d573d6000803e3d6000fd5b5060008054815260016020526040812080546001600160a01b0319166001600160a01b0384161790558054919250806101958361036c565b9091555090949350505050565b6123f98061039683390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101d657600080fd5b813567ffffffffffffffff808211156101f1576101f16101af565b604051601f8301601f19908116603f01168101908282118183101715610219576102196101af565b8160405283815286602085880101111561023257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561026557600080fd5b823567ffffffffffffffff8082111561027d57600080fd5b610289868387016101c5565b9350602085013591508082111561029f57600080fd5b506102ac858286016101c5565b9150509250929050565b6000602082840312156102c857600080fd5b5035919050565b6000815180845260005b818110156102f5576020818501810151868301820152016102d9565b81811115610307576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061032f60a08301886102cf565b828103602084015261034181886102cf565b6001600160a01b03968716604085015260608401959095525050921660809092019190915292915050565b600060001982141561038e57634e487b7160e01b600052601160045260246000fd5b506001019056fe60e06040526001608081815260a082905260c09190915262000026906010906003620000c7565b503480156200003457600080fd5b50604051620023f9380380620023f9833981016040819052620000579162000289565b845185908590620000709060009060208501906200010f565b508051620000869060019060208401906200010f565b5050600160065550600c80546001600160a01b039485166001600160a01b031991821617909155600d80549290941691161790915560135550620003669050565b8260038101928215620000fd579160200282015b82811115620000fd578251829060ff16905591602001919060010190620000db565b506200010b9291506200018c565b5090565b8280546200011d9062000329565b90600052602060002090601f016020900481019282620001415760008555620000fd565b82601f106200015c57805160ff1916838001178555620000fd565b82800160010185558215620000fd579182015b82811115620000fd5782518255916020019190600101906200016f565b5b808211156200010b57600081556001016200018d565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cb57600080fd5b81516001600160401b0380821115620001e857620001e8620001a3565b604051601f8301601f19908116603f01168101908282118183101715620002135762000213620001a3565b816040528381526020925086838588010111156200023057600080fd5b600091505b8382101562000254578582018301518183018401529082019062000235565b83821115620002665760008385830101525b9695505050505050565b6001600160a01b03811681146200028657600080fd5b50565b600080600080600060a08688031215620002a257600080fd5b85516001600160401b0380821115620002ba57600080fd5b620002c889838a01620001b9565b96506020880151915080821115620002df57600080fd5b50620002ee88828901620001b9565b9450506040860151620003018162000270565b6060870151608088015191945092506200031b8162000270565b809150509295509295909350565b600181811c908216806200033e57607f821691505b602082108114156200036057634e487b7160e01b600052602260045260246000fd5b50919050565b61208380620003766000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635d240c5811610104578063a22cb465116100a2578063d2e59bfe11610071578063d2e59bfe146103d9578063d8251a14146103ec578063e985e9c5146103ff578063edf877041461043b57600080fd5b8063a22cb46514610380578063b88d4fde14610393578063ba27f50b146103a6578063c87b56dd146103c657600080fd5b80636c0360eb116100de5780636c0360eb1461034a57806370a08231146103525780639518a3e91461036557806395d89b411461037857600080fd5b80635d240c58146103115780636352211e146103245780636a6278421461033757600080fd5b806318160ddd1161017157806342842e0e1161014b57806342842e0e146102cf57806349015aac146102e257806356100e14146102f55780635be980671461030857600080fd5b806318160ddd146102985780631e8f9ffa146102a957806323b872dd146102bc57600080fd5b8063081812fc116101ad578063081812fc14610232578063095ea7b31461025d578063131e2f181461027257806317ef8ae61461028557600080fd5b806301ffc9a7146101d457806306fdde03146101fc57806307e229ae14610211575b600080fd5b6101e76101e236600461182a565b61044e565b60405190151581526020015b60405180910390f35b6102046104a0565b6040516101f391906118a6565b61022461021f3660046118b9565b610532565b6040519081526020016101f3565b6102456102403660046118b9565b610575565b6040516001600160a01b0390911681526020016101f3565b61027061026b3660046118ee565b61059c565b005b6102246102803660046118b9565b6106b2565b6102246102933660046118b9565b6106c9565b600f546001600160801b0316610224565b600d54610245906001600160a01b031681565b6102706102ca366004611918565b610703565b6102706102dd366004611918565b610734565b6102246102f03660046118b9565b61074f565b610270610303366004611954565b610789565b61022460135481565b61027061031f366004611954565b610838565b6102456103323660046118b9565b6108df565b610224610345366004611976565b61093f565b610204610ab9565b610224610360366004611976565b610b47565b600c54610245906001600160a01b031681565b610204610bcd565b61027061038e366004611991565b610bdc565b6102706103a1366004611a3c565b610beb565b6102246103b4366004611976565b60146020526000908152604090205481565b6102046103d43660046118b9565b610c23565b6102246103e73660046118b9565b610c53565b6102706103fa3660046118b9565b610cec565b6101e761040d366004611ae7565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102046104493660046118b9565b610d6a565b60006001600160e01b031982166380ac58cd60e01b148061047f57506001600160e01b03198216635b5e139f60e01b145b8061049a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104af90611b1a565b80601f01602080910402602001604051908101604052809291908181526020018280546104db90611b1a565b80156105285780601f106104fd57610100808354040283529160200191610528565b820191906000526020600020905b81548152906001019060200180831161050b57829003601f168201915b5050505050905090565b600061053d82610eb8565b6105625760405162461bcd60e51b815260040161055990611b55565b60405180910390fd5b5060009081526008602052604090205490565b600061058082610ed5565b506000908152600460205260409020546001600160a01b031690565b60006105a7826108df565b9050806001600160a01b0316836001600160a01b031614156106155760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610559565b336001600160a01b03821614806106315750610631813361040d565b6106a35760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610559565b6106ad8383610f28565b505050565b601081600381106106c257600080fd5b0154905081565b60006106d482610eb8565b6106f05760405162461bcd60e51b815260040161055990611b55565b506000908152600a602052604090205490565b61070d3382610f96565b6107295760405162461bcd60e51b815260040161055990611ba4565b6106ad838383611015565b6106ad83838360405180602001604052806000815250610beb565b600061075a82610eb8565b6107765760405162461bcd60e51b815260040161055990611b55565b5060009081526009602052604090205490565b600c546001600160a01b031633146107a057600080fd5b6107a9816108df565b6001600160a01b0316326001600160a01b0316146107d95760405162461bcd60e51b815260040161055990611bf2565b6000818152600a6020526040812080548492906107f7908490611c4d565b9091555050604051828152819032907f42e702cca92cac2a67fd87ece90cd65cdc0bdee9a7ae20dc725b73b263468af5906020015b60405180910390a35050565b600c546001600160a01b0316331461084f57600080fd5b610858816108df565b6001600160a01b0316326001600160a01b0316146108885760405162461bcd60e51b815260040161055990611bf2565b600081815260096020526040812080548492906108a6908490611c4d565b9091555050604051828152819032907f81665166aed8384c9df23393834f1b549569bbb3ca825f52f8390f1bbe1638719060200161082c565b6000818152600260205260408120546001600160a01b03168061049a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610559565b600c546000906001600160a01b0316331461095957600080fd5b600260065414156109ac5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610559565b60026006556109ba32610b47565b15610a195760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206d696e74206d6f7265207468616e206f6e6520746f6b656e20604482015268617420612074696d6560b81b6064820152608401610559565b600f54610a309083906001600160801b03166111bc565b600f80546001600160801b039081166000908152600b60209081526040808320429055845432845260149092528220908316905582549091169190610a7483611c65565b82546101009290920a6001600160801b03818102199093169183160217909155600f54610aa5925060019116611c8c565b60016006556001600160801b031692915050565b600e8054610ac690611b1a565b80601f0160208091040260200160405190810160405280929190818152602001828054610af290611b1a565b8015610b3f5780601f10610b1457610100808354040283529160200191610b3f565b820191906000526020600020905b815481529060010190602001808311610b2257829003601f168201915b505050505081565b60006001600160a01b038216610bb15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610559565b506001600160a01b031660009081526003602052604090205490565b6060600180546104af90611b1a565b610be73383836111d6565b5050565b610bf53383610f96565b610c115760405162461bcd60e51b815260040161055990611ba4565b610c1d848484846112a5565b50505050565b6060610c2e82610eb8565b610c4a5760405162461bcd60e51b815260040161055990611b55565b61049a82610d6a565b6000610c5e82610eb8565b610c6a57506000919050565b6000670de0b6b3a7640000610c7e84610532565b610c889190611cca565b90506000610c958461074f565b90506000610ca2856106c9565b601254909150610cb3908290611cf4565b601154610cc1908490611cf4565b601054610ccf908690611cf4565b610cd99190611c4d565b610ce39190611c4d565b95945050505050565b600c546001600160a01b03163314610d0357600080fd5b3260009081526014602090815260408083205480845260089092528220805491928492610d31908490611c4d565b9091555050604051828152819032907f871d2dd633714517795b5e7c02e648de931e9a9d914f99baf5a96995e096be489060200161082c565b60606000610d7783610c53565b905060008115610d8957506000610da7565b60648210610d9957506001610da7565b620f42408210610da7575060025b600d54601354604051639518c22760e01b81526004810191909152602481018390526060916001600160a01b031690639518c22790604401600060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e249190810190611d13565b90506000610e306104a0565b610e386104a0565b83610e42876112d8565b604051602001610e559493929190611d9d565b6040516020818303038152906040529050610e8e81604051602001610e7a9190611eba565b6040516020818303038152906040526113d6565b604051602001610e9e9190611ed6565b604051602081830303815290604052945050505050919050565b6000908152600260205260409020546001600160a01b0316151590565b610ede81610eb8565b610f255760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610559565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610f5d826108df565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610fa2836108df565b9050806001600160a01b0316846001600160a01b03161480610fe957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061100d5750836001600160a01b031661100284610575565b6001600160a01b0316145b949350505050565b826001600160a01b0316611028826108df565b6001600160a01b03161461108c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610559565b6001600160a01b0382166110ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610559565b6110f983838361153e565b611104600082610f28565b6001600160a01b038316600090815260036020526040812080546001929061112d908490611f1b565b90915550506001600160a01b038216600090815260036020526040812080546001929061115b908490611c4d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610be78282604051806020016040528060008152506115a4565b816001600160a01b0316836001600160a01b031614156112385760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610559565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6112b0848484611015565b6112bc848484846115d7565b610c1d5760405162461bcd60e51b815260040161055990611f32565b6060816112fc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611326578061131081611f84565b915061131f9050600a83611cca565b9150611300565b60008167ffffffffffffffff811115611341576113416119cd565b6040519080825280601f01601f19166020018201604052801561136b576020820181803683370190505b5090505b841561100d57611380600183611f1b565b915061138d600a86611f9f565b611398906030611c4d565b60f81b8183815181106113ad576113ad611cde565b60200101906001600160f81b031916908160001a9053506113cf600a86611cca565b945061136f565b60608151600014156113f657505060408051602081019091526000815290565b600060405180606001604052806040815260200161200e60409139905060006003845160026114259190611c4d565b61142f9190611cca565b61143a906004611cf4565b90506000611449826020611c4d565b67ffffffffffffffff811115611461576114616119cd565b6040519080825280601f01601f19166020018201604052801561148b576020820181803683370190505b509050818152600183018586518101602084015b818310156114f95760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161149f565b600389510660018114611513576002811461152457611530565b613d3d60f01b600119830152611530565b603d60f81b6000198301525b509398975050505050505050565b6001600160a01b038316156106ad5760405162461bcd60e51b815260206004820152602660248201527f4552433732313a207472616e736665722066726f6d206e6f6e2d7a65726f206160448201526564647265737360d01b6064820152608401610559565b6115ae83836116d5565b6115bb60008484846115d7565b6106ad5760405162461bcd60e51b815260040161055990611f32565b60006001600160a01b0384163b156116ca57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061161b903390899088908890600401611fb3565b6020604051808303816000875af1925050508015611656575060408051601f3d908101601f1916820190925261165391810190611ff0565b60015b6116b0573d808015611684576040519150601f19603f3d011682016040523d82523d6000602084013e611689565b606091505b5080516116a85760405162461bcd60e51b815260040161055990611f32565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061100d565b506001949350505050565b6001600160a01b03821661172b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610559565b61173481610eb8565b156117815760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610559565b61178d6000838361153e565b6001600160a01b03821660009081526003602052604081208054600192906117b6908490611c4d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114610f2557600080fd5b60006020828403121561183c57600080fd5b813561184781611814565b9392505050565b60005b83811015611869578181015183820152602001611851565b83811115610c1d5750506000910152565b6000815180845261189281602086016020860161184e565b601f01601f19169290920160200192915050565b602081526000611847602083018461187a565b6000602082840312156118cb57600080fd5b5035919050565b80356001600160a01b03811681146118e957600080fd5b919050565b6000806040838503121561190157600080fd5b61190a836118d2565b946020939093013593505050565b60008060006060848603121561192d57600080fd5b611936846118d2565b9250611944602085016118d2565b9150604084013590509250925092565b6000806040838503121561196757600080fd5b50508035926020909101359150565b60006020828403121561198857600080fd5b611847826118d2565b600080604083850312156119a457600080fd5b6119ad836118d2565b9150602083013580151581146119c257600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a0c57611a0c6119cd565b604052919050565b600067ffffffffffffffff821115611a2e57611a2e6119cd565b50601f01601f191660200190565b60008060008060808587031215611a5257600080fd5b611a5b856118d2565b9350611a69602086016118d2565b925060408501359150606085013567ffffffffffffffff811115611a8c57600080fd5b8501601f81018713611a9d57600080fd5b8035611ab0611aab82611a14565b6119e3565b818152886020838501011115611ac557600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215611afa57600080fd5b611b03836118d2565b9150611b11602084016118d2565b90509250929050565b600181811c90821680611b2e57607f821691505b60208210811415611b4f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f4f6e6c7920746865206f776e65722063616e20616464206120636f6e747269626040820152643aba34b7b760d91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611c6057611c60611c37565b500190565b60006001600160801b0380831681811415611c8257611c82611c37565b6001019392505050565b60006001600160801b0383811690831681811015611cac57611cac611c37565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600082611cd957611cd9611cb4565b500490565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611d0e57611d0e611c37565b500290565b600060208284031215611d2557600080fd5b815167ffffffffffffffff811115611d3c57600080fd5b8201601f81018413611d4d57600080fd5b8051611d5b611aab82611a14565b818152856020838501011115611d7057600080fd5b610ce382602083016020860161184e565b60008151611d9381856020860161184e565b9290920192915050565b683d913730b6b2911d1160b91b81528451600090611dc2816009850160208a0161184e565b6a0204d656d626572736869760ac1b600991840191820181905271111610113232b9b1b934b83a34b7b7111d1160711b60148301528651611e0a816026850160208b0161184e565b60269201918201526c1116101134b6b0b3b2911d101160991b60318201528451611e3b81603e84016020890161184e565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a9101603e8101919091526d08941bddd95c8813195d995b088b60921b605e82015268113b30b63ab2911d1160b91b606c820152611eaf611e9f6075830186611d81565b63227d5d7d60e01b815260040190565b979650505050505050565b60008251611ecc81846020870161184e565b9190910192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611f0e81601d85016020870161184e565b91909101601d0192915050565b600082821015611f2d57611f2d611c37565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600019821415611f9857611f98611c37565b5060010190565b600082611fae57611fae611cb4565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611fe69083018461187a565b9695505050505050565b60006020828403121561200257600080fd5b81516118478161181456fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220ced7474ea0c8f8e517a0072e215b1a355dcaac70ae18d21d9c8fbc099e5bd55664736f6c634300080a0033a26469706673582212207900ad02e61c7b3e44f86e3d6650a8cef00a8372d98e9d420881919641c1ce0664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3790,
        "contract": "contracts/Giv3NFTFactory.sol:Giv3NFTFactory",
        "label": "collectionsCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3795,
        "contract": "contracts/Giv3NFTFactory.sol:Giv3NFTFactory",
        "label": "collections",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Giv3NFT)3784)"
      },
      {
        "astId": 3798,
        "contract": "contracts/Giv3NFTFactory.sol:Giv3NFTFactory",
        "label": "GIV3_CORE",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IGiv3Core)4736"
      },
      {
        "astId": 3801,
        "contract": "contracts/Giv3NFTFactory.sol:Giv3NFTFactory",
        "label": "STATIC_IMAGE_STORAGE",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IImageStorage)4838"
      },
      {
        "astId": 3804,
        "contract": "contracts/Giv3NFTFactory.sol:Giv3NFTFactory",
        "label": "DYNAMIC_IMAGE_STORAGE",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IImageStorage)4838"
      }
    ],
    "types": {
      "t_contract(Giv3NFT)3784": {
        "encoding": "inplace",
        "label": "contract Giv3NFT",
        "numberOfBytes": "20"
      },
      "t_contract(IGiv3Core)4736": {
        "encoding": "inplace",
        "label": "contract IGiv3Core",
        "numberOfBytes": "20"
      },
      "t_contract(IImageStorage)4838": {
        "encoding": "inplace",
        "label": "contract IImageStorage",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Giv3NFT)3784)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Giv3NFT)",
        "numberOfBytes": "32",
        "value": "t_contract(Giv3NFT)3784"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}